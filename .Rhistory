'type' = 'duty_cycle_widget',
'value_1' = deployDetails$RecordingDuration_m[i],
'value_2' = deployDetails$RecordingInterval_m[i],
'checked' = FALSE,
'start' = posixToText(deployDetails$Data_Start[i]),
'end' = posixToText(deployDetails$Data_End[i])
)
)
),
'2' = list(
'channel_start' = posixToText(deployDetails$Data_Start[i]),
'channel_end' = posixToText(deployDetails$Data_End[i]),
'sensor' = deployDetails$ChannelNumber_2[i],
'sampling details' = list(
list(
'type' = 'sample_rate_widget',
'value_1' = deployDetails$SampleRate_kHz[i],
'value_2' = '16',
'checked' = FALSE,
'start' = posixToText(deployDetails$Data_Start[i]),
'end' = posixToText(deployDetails$Data_End[i])
),
list(
'type' = 'duty_cycle_widget',
'value_1' = deployDetails$RecordingDuration_m[i],
'value_2' = deployDetails$RecordingInterval_m[i],
'checked' = FALSE,
'start' = posixToText(deployDetails$Data_Start[i]),
'end' = posixToText(deployDetails$Data_End[i])
)
)
)
)
dd$SAMPLING_DETAILS[i] <- toJSON(newSdList)
}
# Comment once working
# Copy text from database
# sdText <- '{"1": {"channel_start": "2023-10-05T23:29:58", "channel_end": "2023-10-06T23:23:58", "sensor": "1", "sampling details": [{"type": "sample_rate_widget", "value_1": "384", "value_2": "16", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}, {"type": "duty_cycle_widget", "value_1": "6", "value_2": "6", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}]}, "2": {"channel_start": "2023-10-05T23:29:58", "channel_end": "2023-10-06T23:23:58", "sensor": "2", "sampling details": [{"type": "sample_rate_widget", "value_1": "384", "value_2": "16", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}, {"type": "duty_cycle_widget", "value_1": "6", "value_2": "6", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}]}}'
# sdList <- fromJSON(sdText)
# cat(toJSON(newSdList))
# cat(toJSON(sdList))
# view(newSdList)
# View(sdList)
#  identical(newSdList,sdList)
for(i in 1:nrow(dd)) {
#  for(i in 64) {
newQdList <- list(
'analyst' = deployDetails$Quality_Analyst[i],
'analyst_uuid' = '',
'quality_details' = list(
list(
'quality' = 'Good', #Setting default to 'good' rather than deployDetails$Quality_Category[i] because the quality low and high frequency in our spreadsheet is referring to the frequency range where the data is good
'low_freq' = deployDetails$Quality_LowFreq[i],
'high_freq' = deployDetails$Quality_HighFreq[i],
'start' = posixToText(deployDetails$Data_Start[i]),
'end' = posixToText(deployDetails$Data_End[i]),
'comments' = paste('Refer to ', deployDetails$Data_ID[i], '_500Hz_LF_Noise_Log.xls' , ' for detailed noise logs.', sep = ""),
'channels' = list(
1)
)
),
'method' = '',
'objectives' = '',
'abstract' = ''
)
# save newQdList to r list
dd$QUALITY_DETAILS[i] <- toJSON(newQdList)
}
# Comment once working
# qdText <- '{"analyst": "Kourtney Burger", "analyst_uuid": "", "quality_details": [{"quality": "Good", "low_freq": "0", "high_freq": "192000", "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58", "comments": "Refer to ADRIFT_097_500Hz_LF_Noise_Log.xls for detailed noise logs.", "channels": [1]}], "method": "", "objectives": "", "abstract": ""}'
# qdList <- fromJSON(qdText)
# cat(toJSON(newQdList))
# cat(toJSON(qdList))
# view(newQdList)
# View(qdList)
# identical(newQdList,qdList)
# PASCAL - Shannon Rankin & Jennifer McCullough
# CCES - Shannon Rankin and Anne Simonis
# ADRIFT - Shannon Rankin & Chief sci from deployment details
for (i in 1:nrow(dd)) {
# for(i in 64) {
newSciList <- list(
list(
'name' = 'Shannon Rankin',
'uuid' = ''
),
list(
'name' = deployDetails$ChiefSci[i],
'uuid' = ''
)
)
dd$SCIENTISTS[i] <- toJSON(newSciList)
}
# Comment once working
# Copy text from database
# sciText <- '[{"name": "Shannon Rankin", "uuid": ""}, {"name": "Eric Bjorkstedt", "uuid": ""}]'
# sciList <- fromJSON(sciText)
# cat(toJSON(newSciList))
# cat(toJSON(sciList))
# view(newSciList)
# View(sciList)
# identical(newSciList,sciList)
# This will always be NOAA SWFSC
for (i in 1:nrow(dd)) {
#  for (i in 64) {
newSponList <- list(
list(
'name' = 'NOAA SWFSC',
'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
)
)
dd$SPONSORS[i] <- toJSON(newSponList)
}
# Comment once working
# Copy text from database
# sponText <- '[{"name": "NOAA SWFSC", "uuid": "918a8687-8b33-4f70-b550-79a5273866fa"}]'
# sponList <- fromJSON(sponText)
# cat(toJSON(newSponList))
# cat(toJSON(sponList))
# view(newSponList)
# View(sponList)
# identical(newSponList,sponList)
# For ADRIFT, this will always be NOAA SWFSC, BOEM, & ...
for (i in 1:nrow(dd)) {
#  for (i in 64) {
newFunList <- list(
list(
'name' = 'NOAA SWFSC',
'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
),
list(
'name' = 'BOEM',
'uuid' = 'fee4d17a-a7dd-4f13-ade5-817b4f1fc86d'
)
)
dd$FUNDERS[i] <- toJSON(newFunList)
}
# Comment once working
# Copy text from database
# funText <- '[{"name": "NOAA SWFSC", "uuid": "918a8687-8b33-4f70-b550-79a5273866fa"}, {"name": "BOEM", "uuid": "fee4d17a-a7dd-4f13-ade5-817b4f1fc86d"}]'
# funList <- fromJSON(funText)
# cat(toJSON(newFunList))
# cat(toJSON(funList))
# view(newFunList)
# View(funList)
# identical(newFunList,funList)
# A lot of this data has to come from the calibration sheet
# For CCES, all calibration info is in 'CCES2018_CalibrationInfo.csv'
# For PASCAL, make spreadsheet from report
# For ADRIFT, all calibration info was pulled from the inventory and is in 'ADRIFT_CalibrationInfo.csv'
# read in data from calibration info spreadsheet
calInfo <- read.csv("~/GitHub/ADRIFT-Deployment-PassivePacker/Calibration Files/Inventory - Hydrophones.csv")
for(i in 1:nrow(dd)) {
#  for (i in 64) {
newSenList <- list(
'0' = list(
'type' = 'Audio Sensor',
'number' = '1',
'id' = as.character(deployDetails$SensorNumber_1..hydrophone.serial.number.[i]),
'name' = calInfo$Model[calInfo$Serial.Number == deployDetails$SensorNumber_1..hydrophone.serial.number.[i]],
'pos_x' = '',
'pos_y' = '',
'pos_z' = '-100',
'value_1' = as.character(deployDetails$SensorNumber_1..hydrophone.serial.number.[i]),
'value_2' = '',
'description' = ''
),
'1' = list(
'type' = 'Audio Sensor',
'number' = '2',
'id' = as.character(deployDetails$SensorNumber_2...hydrophone.serial.number.[i]),
'name' = calInfo$Model[calInfo$Serial.Number == deployDetails$SensorNumber_2...hydrophone.serial.number.[i]],
'pos_x' = '',
'pos_y' = '',
'pos_z' = '-105',
'value_1' = as.character(deployDetails$SensorNumber_2...hydrophone.serial.number.[i]),
'value_2' = '',
'description' = ''
),
'2' = list(
'type' = 'Depth Sensor',
'number' = '3',
'id' = deployDetails$Depth.Sensor..serial.number.[i],
'name' = 'Sensus Ultra',
'pos_x' = '',
'pos_y' = '',
'pos_z' = '-100',
'value_1' = '',
'value_2' = '',
'description' = ''
),
'3' = list(
'type' = 'Other Sensor',
'number' = '4',
'id' = deployDetails$GPS.ID..if.appropriate...top...bottom.[i],
'name' = deployDetails$GPS.Tracker[i],
'pos_x' = '',
'pos_y' = '',
'pos_z' = '+1',
'value_1' = 'GPS',
'value_2' = '',
'description' = ''
)
)
dd$SENSORS[i] <- toJSON(newSenList)
}
# Comment once working
# Copy text from database
# senText <- '{"0": {"type": "Audio Sensor", "number": "1", "id": "856155", "name": "HTI-92-WB", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "856155", "value_2": "", "description": ""}, "1": {"type": "Audio Sensor", "number": "2", "id": "856166", "name": "HTI-99-HF", "pos_x": "", "pos_y": "", "pos_z": "-105", "value_1": "856166", "value_2": "", "description": ""}, "2": {"type": "Depth Sensor", "number": "3", "id": "16396", "name": "Sensus Ultra", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "", "value_2": "", "description": ""}, "3": {"type": "Other Sensor", "number": "4", "id": "SO-001", "name": "Solar", "pos_x": "", "pos_y": "", "pos_z": "+1", "value_1": "GPS", "value_2": "", "description": ""}}'
# senList <- fromJSON(senText)
# cat(toJSON(newSenList))
# cat(toJSON(senList))
# view(newSenList)
# View(senList)
# identical(newSenList,senList)
for(i in 1:nrow(dd)) {
#  for (i in 64) {
newDdList <- list(
'DEPLOY_TYPE' = 'Mobile Marine',
'SEA_AREA' = 'North Pacific Ocean',
'DEPLOY_SHIP' = deployDetails$Deploy.Vessel[i],
'FILES' = paste('G:/ADRIFT_RawData/manipulated/gps/',deployDetails$Data_ID[i],"/",deployDetails$Data_ID[i],'_GPS.csv', sep = ""),
'POSITION_DETAILS' = ''
)
dd$DEPLOYMENT_DETAILS[i] <- toJSON(newDdList)
}
# Comment once working
# Copy text from database
# ddText <- '{"DEPLOY_TYPE": "Mobile Marine", "SEA_AREA": "North Pacific Ocean", "DEPLOY_SHIP": "Scrimshaw", "FILES": "G:/ADRIFT_RawData/manipulated/gps/ADRIFT_097/ADRIFT_097_GPS.csv", "POSITION_DETAILS": ""}'
# ddList <- fromJSON(ddText)
# cat(toJSON(newDdList))
# cat(toJSON(ddList))
# view(newDdList)
# View(ddList)
# identical(newDdList,ddList)
for(i in 1:nrow(dd)) {
newCalList <- list(
'CAL_STATE' = 'Factory Calibrated',
'CAL_DOCS_PATH' = paste("G:/ADRIFT_RawData/cal files"),
'SENSITIVITY' = '',
'FREQUENCY' = '',
'GAIN' = '',
'COMMENT' = 'This dataset is composed of multichannel recorders with different types of hydrophones, each with its own unique sensitivity and frequency range. For the detailed calibration information refer to the ADRIFT_CalibrationInfo.csv spreadsheet.'
)
dd$CALIBRATION_INFO[i] <- toJSON(newCalList)
}
# comment once working
# Copy text from database
# calText <- '{"CAL_STATE": "Factory Calibrated", "CAL_DOCS_PATH": "G:/ADRIFT_RawData/cal files", "SENSITIVITY": "", "FREQUENCY": "", "GAIN": "", "COMMENT": "This dataset is composed of multichannel recorders with different types of hydrophones, each with its own unique sensitivity and frequency range. For the detailed calibration information refer to the ADRIFT_CalibrationInfo.csv spreadsheet."}'
# calList <- fromJSON(calText)
# cat(toJSON(newCalList))
# cat(toJSON(calList))
# view(newCalList)
# View(calList)
# identical(newCalList,calList)
for(i in 1:nrow(dd)) {
#  for (i in 64) {
newDiList <- list(
'TYPE' = 'Raw',
'SUB_TYPE' = 'Audio',
'PLATFORM' = 'Drifter',
'INSTRUMENT_TYPE' = deployDetails$Type[i],
'INSTRUMENT_ID' = deployDetails$Instrument_ID[i],
'DEPLOYMENT_TIME' = posixToText(deployDetails$Deployment_Date[i]),
'RECOVERY_TIME' = posixToText(deployDetails$Recovery_Date[i]),
'AUDIO_START' = posixToText(deployDetails$Data_Start[i]),
'AUDIO_END' = posixToText(deployDetails$Data_End[i]),
'SOURCE_PATH' =  paste('G:/ADRIFT_RawData/manipulated/audio/',deployDetails$Data_ID[i], sep = ""),
'DATA_COMMENT' = deployDetails$Notes[i]
)
dd$DATASET_INFO[i] <- toJSON(newDiList)
}
# comment once working
# Copy text from database
# diText <- '{"TYPE":"Raw","SUB_TYPE":"Audio","PLATFORM":"Drifter","INSTRUMENT_TYPE":"SoundTrap 4300 High Frequency","INSTRUMENT_ID":"5992","DEPLOYMENT_TIME":"2023-10-05T23:16:00","RECOVERY_TIME":"2023-10-06T23:24:00","AUDIO_START":"2023-10-05T23:29:58","AUDIO_END":"2023-10-06T23:23:58","SOURCE_PATH":"G:/ADRIFT_RawData/manipulated/audio/ADRIFT_097","DATA_COMMENT":""}'
# diList <- fromJSON(diText)
# cat(toJSON(newDiList))
# cat(toJSON(diList))
# view(newDiList)
# View(diList) #comment once running full loop
# identical(newDiList,diList)
for(i in 1:nrow(dd)) {
#  for (i in 64) {
newAncilList <- list(
'BIO_PATH' = "",
'OTHER_PATH' = paste('G:/ADRIFT_RawData/manipulated/metadata/', deployDetails$Data_ID[i], sep = ""),
'TEMP_PATH' = paste('G:/ADRIFT_RawData/manipulated/temp/', deployDetails$Data_ID[i], sep = "")
)
dd$ANCILLARY_INFO[i] <- toJSON(newAncilList)
}
# comment once working
# ancilText <- '{"BIO_PATH": "", "OTHER_PATH": "G:/ADRIFT_RawData/manipulated/metadata/ADRIFT_097", "TEMP_PATH": "G:/ADRIFT_RawData/manipulated/temp/ADRIFT_097"}'
# ancilList <- fromJSON(ancilText)
# cat(toJSON(newAncilList))
# cat(toJSON(ancilList))
# #view(newAncilList)
# #View(ancilList) #comment once running full loop
# identical(newAncilList,ancilList)
con <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
dbAppendTable(con, 'DEPLOYMENT_DATA', dd)
dbDisconnect(con)
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
DepDir <- here('ADRIFT-Deployment-PassivePacker')
library(here)
library(DBI)
library(RSQLite)
library(tidyverse)
library(rjson)
library(dplyr)
library(stringr)
library(DBI)
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
View(ppdt)
if(ppdt$PUBLICATION_DATE == NA) {
ppdt$PUBLICATION_DATE <- '1/18/2024'
}
if(ppdt$PUBLICATION_DATE == 'NA') {
ppdt$PUBLICATION_DATE <- '1/18/2024'
}
if(ppdt$PUBLICATION_DATE = 'NA') {
if(ppdt$PUBLICATION_DATE =/ 'NA') {
if(ppdt$PUBLICATION_DATE /= 'NA') {
if(ppdt$PUBLICATION_DATE != 'NA') {
ppdt$PUBLICATION_DATE <- '1/18/2024'
}
ppdt$PUBLICATION_DATE[ppdt$PUBLICATION_DATE == 'NA'] <- '1/18/2024'
ppdt$PUBLICATION_DATE[ppdt$PUBLICATION_DATE == ''] <- '1/18/2024'
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[105]
ppdt$PUBLICATION_DATE[ppdt$PUBLICATION_DATE == 'NA'] <- '1/18/2024'
ppdt$PUBLICATION_DATE[105]
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '1/18/2024'
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2024-1-18'
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
for (i in 1:nrow(deployDetails)) {
deployDate <- deployDetails$Date..UTC[i]
pubDate <- deployDate %m+% years(2)
pubDate <- as.character(pubDate)
dd$PUBLICATION_DATE[i] <- pubDate
}
for (i in 1:nrow(ppdt)) {
pubDate <- ppdt$PUBLICATION_DATE[i]
pubDate <- pubDate %m+% years(2)
pubDate <- as.character(pubDate)
dd$PUBLICATION_DATE[i] <- pubDate
}
i=1
pubDate <- ppdt$PUBLICATION_DATE[i]
pubDate <- as.Date(pubDate)
pubDate <- pubDate %m+% years(2)
pubDate <- as.character(pubDate)
pubDate
dd$PUBLICATION_DATE[i] <- pubDate
for (i in 1:nrow(ppdt)) {
pubDate <- ppdt$PUBLICATION_DATE[i]
pubDate <- as.Date(pubDate)
pubDate <- pubDate %m+% years(2)
pubDate <- as.character(pubDate)
dd$PUBLICATION_DATE[i] <- pubDate
}
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
for (i in 1:nrow(ppdt)) {
pubDate <- ppdt$PUBLICATION_DATE[i]
pubDate <- as.Date(pubDate)
pubDate <- pubDate %m+% years(2)
pubDate <- as.character(pubDate)
dd$PUBLICATION_DATE[i] <- pubDate
}
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2023-1-18'
for (i in 1:nrow(ppdt)) {
pubDate <- ppdt$PUBLICATION_DATE[i]
pubDate <- as.Date(pubDate)
pubDate <- pubDate %m+% years(2)
pubDate <- as.character(pubDate)
dd$PUBLICATION_DATE[i] <- pubDate
}
library(here)
library(DBI)
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2023-1-18'
for (i in 1:nrow(ppdt)) {
pubDate <- ppdt$PUBLICATION_DATE[i]
pubDate <- as.Date(pubDate)
pubDate <- pubDate %m+% years(2)
pubDate <- as.character(pubDate)
dd$PUBLICATION_DATE[i] <- pubDate
}
library(here)
library(DBI)
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2023-01-18'
for (i in 1:nrow(ppdt)) {
pubDate <- ppdt$PUBLICATION_DATE[i]
pubDate <- as.Date(pubDate)
pubDate <- pubDate %m+% years(2)
pubDate <- as.character(pubDate)
dd$PUBLICATION_DATE[i] <- pubDate
}
library(here)
library(DBI)
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2023-01-18'
for (i in 1:nrow(ppdt)) {
oldpubDate <- ppdt$PUBLICATION_DATE[i]
oldpubDate <- as.Date(oldpubDate)
pubDate <- pubDate %m+% years(2)
pubDate <- as.character(pubDate)
dd$PUBLICATION_DATE[i] <- pubDate
}
library(here)
library(DBI)
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2023-01-18'
for (i in 1:nrow(ppdt)) {
oldpubDate <- ppdt$PUBLICATION_DATE[i]
oldpubDate <- as.Date(oldpubDate)
# pubDate <- pubDate %m+% years(2)
#
# pubDate <- as.character(pubDate)
# dd$PUBLICATION_DATE[i] <- pubDate
}
oldpubDate
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2023-01-18'
for (i in 1:nrow(ppdt)) {
oldpubDate <- ppdt$PUBLICATION_DATE[i]
oldpubDate <- as.Date(oldpubDate)
# pubDate <- pubDate %m+% years(2)
#
# pubDate <- as.character(pubDate)
dd$PUBLICATION_DATE[i] <- oldpubDate
}
library(here)
library(DBI)
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2023-01-18'
class(ppdt$PUBLICATION_DATE)
library(here)
library(DBI)
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2023-01-18'
for (i in 1:nrow(ppdt)) {
oldpubDate <- ppdt$PUBLICATION_DATE[i]
oldpubDate <- as.Date(oldpubDate)
pubDate <- oldpubDate %m+% years(2)
pubDate <- as.character(pubDate)
ppdt$PUBLICATION_DATE[i] <- pubDate
}
library(here)
library(DBI)
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
DepDir <- here('ADRIFT-Deployment-PassivePacker')
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
ppdt$PUBLICATION_DATE[is.na(ppdt$PUBLICATION_DATE)] <- '2023-01-18'
for (i in 1:nrow(ppdt)) {
oldpubDate <- ppdt$PUBLICATION_DATE[i]
oldpubDate <- as.Date(oldpubDate)
pubDate <- oldpubDate %m+% years(1)
pubDate <- as.character(pubDate)
ppdt$PUBLICATION_DATE[i] <- pubDate
}
con <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
dbAppendTable(con, 'DEPLOYMENT_DATA', ppdt)
con <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
dbAppendTable(con, 'DEPLOYMENT_DATA', ppdt)
dbDisconnect(con)
