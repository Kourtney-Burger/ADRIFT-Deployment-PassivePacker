'channel_end' = posixToText(deployDetails$Data_End[i]),
'sensor' = deployDetails$ChannelNumber_1[i],
'sampling details' = list(
list(
'type' = 'sample_rate_widget',
'value_1' = deployDetails$SampleRate_kHz[i],
'value_2' = '16',
'checked' = FALSE,
'start' = posixToText(deployDetails$Data_Start[i]),
'end' = posixToText(deployDetails$Data_End[i])
),
list(
'type' = 'duty_cycle_widget',
'value_1' = deployDetails$RecordingDuration_m[i],
'value_2' = deployDetails$RecordingInterval_m[i],
'checked' = FALSE,
'start' = posixToText(deployDetails$Data_Start[i]),
'end' = posixToText(deployDetails$Data_End[i])
)
)
),
'2' = list(
'channel_start' = posixToText(deployDetails$Data_Start[i]),
'channel_end' = posixToText(deployDetails$Data_End[i]),
'sensor' = deployDetails$ChannelNumber_2[i],
'sampling details' = list(
list(
'type' = 'sample_rate_widget',
'value_1' = deployDetails$SampleRate_kHz[i],
'value_2' = '16',
'checked' = FALSE,
'start' = posixToText(deployDetails$Data_Start[i]),
'end' = posixToText(deployDetails$Data_End[i])
),
list(
'type' = 'duty_cycle_widget',
'value_1' = deployDetails$RecordingDuration_m[i],
'value_2' = deployDetails$RecordingInterval_m[i],
'checked' = FALSE,
'start' = posixToText(deployDetails$Data_Start[i]),
'end' = posixToText(deployDetails$Data_End[i])
)
)
)
)
dd$SAMPLING_DETAILS[i] <- toJSON(newSdList)
}
# Comment once working
# Copy text from database
# sdText <- '{"1": {"channel_start": "2023-10-05T23:29:58", "channel_end": "2023-10-06T23:23:58", "sensor": "1", "sampling details": [{"type": "sample_rate_widget", "value_1": "384", "value_2": "16", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}, {"type": "duty_cycle_widget", "value_1": "6", "value_2": "6", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}]}, "2": {"channel_start": "2023-10-05T23:29:58", "channel_end": "2023-10-06T23:23:58", "sensor": "2", "sampling details": [{"type": "sample_rate_widget", "value_1": "384", "value_2": "16", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}, {"type": "duty_cycle_widget", "value_1": "6", "value_2": "6", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}]}}'
# sdList <- fromJSON(sdText)
# cat(toJSON(newSdList))
# cat(toJSON(sdList))
# view(newSdList)
# View(sdList)
#  identical(newSdList,sdList)
for(i in 1:nrow(dd)) {
#  for(i in 64) {
newQdList <- list(
'analyst' = 'Cory Hom-Weaver',
'analyst_uuid' = '8f9f3e13-3571-436d-b1fd-6e779acd9a9f',
'quality_details' = list(
list(
'quality' = 'Good', #Setting default to 'good' rather than deployDetails$Quality_Category[i] because the quality low and high frequency in our spreadsheet is referring to the frequency range where the data is good
'low_freq' = deployDetails$Quality_LowFreq[i],
'high_freq' = deployDetails$Quality_HighFreq[i],
'start' = posixToText(deployDetails$Data_Start[i]),
'end' = posixToText(deployDetails$Data_End[i]),
'comments' = paste('Refer to ', deployDetails$Data_ID[i], '_500Hz_LF_Noise_Log.xls' , ' for detailed noise logs.', sep = ""),
'channels' = list(
1)
)
),
'method' = '',
'objectives' = '',
'abstract' = ''
)
# save newQdList to r list
dd$QUALITY_DETAILS[i] <- toJSON(newQdList)
}
# Comment once working
# qdText <- '{"analyst": "Kourtney Burger", "analyst_uuid": "", "quality_details": [{"quality": "Good", "low_freq": "0", "high_freq": "192000", "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58", "comments": "Refer to ADRIFT_097_500Hz_LF_Noise_Log.xls for detailed noise logs.", "channels": [1]}], "method": "", "objectives": "", "abstract": ""}'
# qdList <- fromJSON(qdText)
# cat(toJSON(newQdList))
# cat(toJSON(qdList))
# view(newQdList)
# View(qdList)
# identical(newQdList,qdList)
# PASCAL - Shannon Rankin
for (i in 1:nrow(dd)) {
# for(i in 64) {
newSciList <- list(
list(
'name' = 'Shannon Rankin',
'uuid' = ''
)
)
dd$SCIENTISTS[i] <- toJSON(newSciList)
}
# Comment once working
# Copy text from database
# sciText <- '[{"name": "Shannon Rankin", "uuid": ""}, {"name": "Eric Bjorkstedt", "uuid": ""}]'
# sciList <- fromJSON(sciText)
# cat(toJSON(newSciList))
# cat(toJSON(sciList))
# view(newSciList)
# View(sciList)
# identical(newSciList,sciList)
# This will always be NOAA SWFSC
for (i in 1:nrow(dd)) {
#  for (i in 64) {
newSponList <- list(
list(
'name' = 'NOAA SWFSC',
'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
),
list(
'name' = 'BOEM',
'uuid' = 'fee4d17a-a7dd-4f13-ade5-817b4f1fc86d'
),
list(
'name' = 'US Department of Interior',
'uuid' = 'a0111258-c83c-4a1e-92a1-3a41dae761b5'
)
)
dd$SPONSORS[i] <- toJSON(newSponList)
}
# Comment once working
# Copy text from database
# sponText <- '[{"name": "NOAA SWFSC", "uuid": "918a8687-8b33-4f70-b550-79a5273866fa"}]'
# sponList <- fromJSON(sponText)
# cat(toJSON(newSponList))
# cat(toJSON(sponList))
# view(newSponList)
# View(sponList)
# identical(newSponList,sponList)
# This will always be NOAA SWFSC
for (i in 1:nrow(dd)) {
#  for (i in 64) {
newSponList <- list(
list(
'name' = 'NOAA SWFSC',
'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
)
)
dd$SPONSORS[i] <- toJSON(newSponList)
}
# Comment once working
# Copy text from database
# sponText <- '[{"name": "NOAA SWFSC", "uuid": "918a8687-8b33-4f70-b550-79a5273866fa"}]'
# sponList <- fromJSON(sponText)
# cat(toJSON(newSponList))
# cat(toJSON(sponList))
# view(newSponList)
# View(sponList)
# identical(newSponList,sponList)
# For ADRIFT, this will always be NOAA SWFSC, BOEM, & ...
for (i in 1:nrow(dd)) {
#  for (i in 64) {
newFunList <- list(
list(
'name' = 'NOAA SWFSC',
'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
),
list(
'name' = 'BOEM',
'uuid' = 'fee4d17a-a7dd-4f13-ade5-817b4f1fc86d'
),
list(
'name' = 'US Department of Interior',
'uuid' = 'a0111258-c83c-4a1e-92a1-3a41dae761b5'
)
)
dd$FUNDERS[i] <- toJSON(newFunList)
}
# Comment once working
# Copy text from database
# funText <- '[{"name": "NOAA SWFSC", "uuid": "918a8687-8b33-4f70-b550-79a5273866fa"}, {"name": "BOEM", "uuid": "fee4d17a-a7dd-4f13-ade5-817b4f1fc86d"}]'
# funList <- fromJSON(funText)
# cat(toJSON(newFunList))
# cat(toJSON(funList))
# view(newFunList)
# View(funList)
# identical(newFunList,funList)
# read in data from calibration info spreadsheet
calInfo <- read.csv("~/GitHub/ADRIFT-Deployment-PassivePacker/Calibration Files/PASCAL_HydrophoneSpecs.csv")
for(i in 1:nrow(dd)) {
#  for (i in 64) {
newSenList <- list(
'0' = list(
'type' = 'Audio Sensor',
'number' = '1',
'id' = as.character(deployDetails$SensorNumber_1..hydrophone.serial.number.[i]),
'name' = calInfo$HydrophoneType_1[i],
'pos_x' = '',
'pos_y' = '',
'pos_z' = '-100',
'value_1' = as.character(deployDetails$SensorNumber_1..hydrophone.serial.number.[i]),
'value_2' = '',
'description' = ''
),
'1' = list(
'type' = 'Audio Sensor',
'number' = '2',
'id' = as.character(deployDetails$SensorNumber_2...hydrophone.serial.number.[i]),
'name' = calInfo$HydrophoneType_2[i],
'pos_x' = '',
'pos_y' = '',
'pos_z' = '-105',
'value_1' = as.character(deployDetails$SensorNumber_2...hydrophone.serial.number.[i]),
'value_2' = '',
'description' = ''
),
'2' = list(
'type' = 'Depth Sensor',
'number' = '3',
'id' = deployDetails$Depth.Sensor..serial.number.[i],
'name' = 'Sensus Ultra',
'pos_x' = '',
'pos_y' = '',
'pos_z' = '-100',
'value_1' = '',
'value_2' = '',
'description' = ''
),
'3' = list(
'type' = 'Other Sensor',
'number' = '4',
'id' = deployDetails$GPS.ID..if.appropriate...top...bottom.[i],
'name' = deployDetails$GPS.Tracker[i],
'pos_x' = '',
'pos_y' = '',
'pos_z' = '+1',
'value_1' = 'GPS',
'value_2' = '',
'description' = ''
)
)
dd$SENSORS[i] <- toJSON(newSenList)
}
# Comment once working
# Copy text from database
# senText <- '{"0": {"type": "Audio Sensor", "number": "1", "id": "856155", "name": "HTI-92-WB", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "856155", "value_2": "", "description": ""}, "1": {"type": "Audio Sensor", "number": "2", "id": "856166", "name": "HTI-99-HF", "pos_x": "", "pos_y": "", "pos_z": "-105", "value_1": "856166", "value_2": "", "description": ""}, "2": {"type": "Depth Sensor", "number": "3", "id": "16396", "name": "Sensus Ultra", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "", "value_2": "", "description": ""}, "3": {"type": "Other Sensor", "number": "4", "id": "SO-001", "name": "Solar", "pos_x": "", "pos_y": "", "pos_z": "+1", "value_1": "GPS", "value_2": "", "description": ""}}'
# senList <- fromJSON(senText)
# cat(toJSON(newSenList))
# cat(toJSON(senList))
# view(newSenList)
# View(senList)
# identical(newSenList,senList)
i=1
deployDetails$SensorNumber_1[i]
calInfo$Hydrophone.Type[calInfo$Serial.Number == deployDetails$SensorNumber_1[i]]
i=2
calInfo$Hydrophone.Type[calInfo$Serial.Number == deployDetails$SensorNumber_1[i]]
colnames(deployDetails)
# read in data from calibration info spreadsheet
calInfo <- read.csv("~/GitHub/ADRIFT-Deployment-PassivePacker/Calibration Files/PASCAL_HydrophoneSpecs.csv")
for(i in 1:nrow(dd)) {
#  for (i in 64) {
newSenList <- list(
'0' = list(
'type' = 'Audio Sensor',
'number' = '1',
'id' = as.character(deployDetails$SensorNumber_1[i]),
'name' = calInfo$Hydrophone.Type[calInfo$Serial.Number == deployDetails$SensorNumber_1[i]],
'pos_x' = '',
'pos_y' = '',
'pos_z' = '-100',
'value_1' = as.character(deployDetails$SensorNumber_1[i]),
'value_2' = '',
'description' = ''
),
'1' = list(
'type' = 'Audio Sensor',
'number' = '2',
'id' = as.character(deployDetails$SensorNumber_2[i]),
'name' =calInfo$Hydrophone.Type[calInfo$Serial.Number == deployDetails$SensorNumber_2[i]],
'pos_x' = '',
'pos_y' = '',
'pos_z' = '-105',
'value_1' = as.character(deployDetails$SensorNumber_2[i]),
'value_2' = '',
'description' = ''
),
'2' = list(
'type' = 'Depth Sensor',
'number' = '3',
'id' = deployDetails$Depth_Sensor[i],
'name' = 'OpenTag',
'pos_x' = '',
'pos_y' = '',
'pos_z' = '-100',
'value_1' = '',
'value_2' = '',
'description' = ''
),
'3' = list(
'type' = 'Other Sensor',
'number' = '4',
'id' = deployDetails$GPS_ID[i],
'name' = deployDetails$Status.1[i],
'pos_x' = '',
'pos_y' = '',
'pos_z' = '+1',
'value_1' = 'GPS',
'value_2' = '',
'description' = ''
)
)
dd$SENSORS[i] <- toJSON(newSenList)
}
# Comment once working
# Copy text from database
# senText <- '{"0": {"type": "Audio Sensor", "number": "1", "id": "856155", "name": "HTI-92-WB", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "856155", "value_2": "", "description": ""}, "1": {"type": "Audio Sensor", "number": "2", "id": "856166", "name": "HTI-99-HF", "pos_x": "", "pos_y": "", "pos_z": "-105", "value_1": "856166", "value_2": "", "description": ""}, "2": {"type": "Depth Sensor", "number": "3", "id": "16396", "name": "Sensus Ultra", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "", "value_2": "", "description": ""}, "3": {"type": "Other Sensor", "number": "4", "id": "SO-001", "name": "Solar", "pos_x": "", "pos_y": "", "pos_z": "+1", "value_1": "GPS", "value_2": "", "description": ""}}'
# senList <- fromJSON(senText)
# cat(toJSON(newSenList))
# cat(toJSON(senList))
# view(newSenList)
# View(senList)
# identical(newSenList,senList)
for(i in 1:nrow(dd)) {
newCalList <- list(
'CAL_STATE' = 'Factory Calibrated',
'CAL_DOCS_PATH' = paste("D:/PASCAL_RawData/cal files"),
'SENSITIVITY' = '',
'FREQUENCY' = '',
'GAIN' = '',
'COMMENT' = 'This dataset is composed of multichannel recorders with different types of hydrophones, each with its own unique sensitivity and frequency range. For the detailed calibration information refer to the PASCAL_CalibrationInfo.xlsx spreadsheet.'
)
dd$CALIBRATION_INFO[i] <- toJSON(newCalList)
}
# comment once working
# Copy text from database
# calText <- '{"CAL_STATE": "Factory Calibrated", "CAL_DOCS_PATH": "G:/ADRIFT_RawData/cal files", "SENSITIVITY": "", "FREQUENCY": "", "GAIN": "", "COMMENT": "This dataset is composed of multichannel recorders with different types of hydrophones, each with its own unique sensitivity and frequency range. For the detailed calibration information refer to the ADRIFT_CalibrationInfo.csv spreadsheet."}'
# calList <- fromJSON(calText)
# cat(toJSON(newCalList))
# cat(toJSON(calList))
# view(newCalList)
# View(calList)
# identical(newCalList,calList)
for(i in 1:nrow(dd)) {
#  for (i in 64) {
newDiList <- list(
'TYPE' = 'Raw',
'SUB_TYPE' = 'Audio',
'PLATFORM' = 'Drifter',
'INSTRUMENT_TYPE' = deployDetails$Type[i],
'INSTRUMENT_ID' = deployDetails$Instrument_ID[i],
'DEPLOYMENT_TIME' = posixToText(deployDetails$Deployment_Date[i]),
'RECOVERY_TIME' = posixToText(deployDetails$Recovery_Date[i]),
'AUDIO_START' = posixToText(deployDetails$Data_Start[i]),
'AUDIO_END' = posixToText(deployDetails$Data_End[i]),
'SOURCE_PATH' =  paste('D:/Packaged Drifts/EmptyAudio'),
'DATA_COMMENT' = deployDetails$Notes[i]
)
dd$DATASET_INFO[i] <- toJSON(newDiList)
}
# comment once working
# Copy text from database
# diText <- '{"TYPE":"Raw","SUB_TYPE":"Audio","PLATFORM":"Drifter","INSTRUMENT_TYPE":"SoundTrap 4300 High Frequency","INSTRUMENT_ID":"5992","DEPLOYMENT_TIME":"2023-10-05T23:16:00","RECOVERY_TIME":"2023-10-06T23:24:00","AUDIO_START":"2023-10-05T23:29:58","AUDIO_END":"2023-10-06T23:23:58","SOURCE_PATH":"G:/ADRIFT_RawData/manipulated/audio/ADRIFT_097","DATA_COMMENT":""}'
# diList <- fromJSON(diText)
# cat(toJSON(newDiList))
# cat(toJSON(diList))
# view(newDiList)
# View(diList) #comment once running full loop
# identical(newDiList,diList)
deployDetails <- read.csv("~/GitHub/ADRIFT-Deployment-PassivePacker/DeploymentDetailsFiles/PASCAL_DeploymentDetails.csv")
#dir.create(file.path('D:/PASCAL_RawData'))
dir.create(file.path('D:/PASCAL_RawData/manipulated'))
dir.create(file.path('D:/PASCAL_RawData/manipulated/audio'))
dir.create(file.path('D:/PASCAL_RawData/manipulated/temp'))
dir.create(file.path('D:/PASCAL_RawData/manipulated/metadata'))
# Set up progress bar
pb <- txtProgressBar(min = 0,      # Minimum value of the progress bar
max = nrow(deployDetails), # Maximum value of the progress bar
style = 3,    # Progress bar style (also available style = 1 and style = 2)
width = 50,   # Progress bar width. Defaults to getOption("width")
char = "=")   # Character used to create the bar
# Start loop
for (i in 1:nrow(deployDetails)) {
# List of files I want to move
currentTemp <- list.files(paste('D:/PASCAL_RawData/RAW from DON/',deployDetails$Data_ID[i],
sep = ""), pattern = "\\.temp.csv$", full.names = T)
# Create folder/directory to move the list above to
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/temp/',
deployDetails$Data_ID[i], sep = "")))
newTemp <- file.path(paste('D:/PASCAL_RawData/manipulated/temp/',
deployDetails$Data_ID[i], sep = ""))
# Copy list of files to new directory
file.copy(currentTemp, newTemp)
# Sets the progress bar to the current state
setTxtProgressBar(pb, i)
}
close(pb) # Close the connection
# Set up progress bar
pb <- txtProgressBar(min = 0,      # Minimum value of the progress bar
max = nrow(deployDetails), # Maximum value of the progress bar
style = 3,    # Progress bar style (also available style = 1 and style = 2)
width = 50,   # Progress bar width. Defaults to getOption("width")
char = "=")   # Character used to create the bar
# Loop to create drift specific metadata folders with 3 folders within it (accelerometer, depth, soundtrap logs)
for (i in 1:nrow(deployDetails)) {
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/metadata/',
deployDetails$Data_ID[i], sep = "")))
#Accelerometer
# List of files I want to move
currentAccel <- list.files(paste('D:/PASCAL_RawData/RAW from DON/',
deployDetails$Data_ID[i], sep = ""),
pattern = "\\.accel.csv$", full.names = T)
# Create folder/directory to move the list above to
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/metadata/',
deployDetails$Data_ID[i],'/accel', sep = "")))
newAccel <- file.path(paste('D:/PASCAL_RawData/manipulated/metadata/',
deployDetails$Data_ID[i],'/accel', sep = ""))
# Copy list of files to new directory
file.copy(currentAccel, newAccel)
#Depth
# List of files I want to move
currentDepth <- list.files(paste('Z:/METADATA/PASCAL/', deployDetails$Data_ID[i],'/',
deployDetails$Data_ID[i],'_Depth_OpenTag', sep = ""),
pattern = "\\OT_Depth.csv$", full.names = T)
# Create folder/directory to move the list above to
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/metadata/',
deployDetails$Data_ID[i],'/depth', sep = "")))
newDepth <- file.path(paste('D:/PASCAL_RawData/manipulated/metadata/',
deployDetails$Data_ID[i],'/depth', sep = ""))
# Copy list of files to new directory
file.copy(currentDepth, newDepth)
#Logs
# List of files I want to move
currentLogs <- list.files(paste('D:/PASCAL_RawData/RAW from DON/',
deployDetails$Data_ID[i], sep = ""),
pattern = "\\.log.xml$", full.names = T)
# Create folder/directory to move the list above to
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/metadata/',
deployDetails$Data_ID[i], '/logs', sep = "")))
newLogs <- file.path(paste('D:/PASCAL_RawData/manipulated/metadata/',
deployDetails$Data_ID[i], '/logs', sep = ""))
# Copy list of files to new directory
file.copy(currentLogs, newLogs)
#Noise logs
# List of files I want to move
currentNoise <- list.files(paste('Z:/RECORDINGS/DRIFTERS/PASCAL_2016/500Hz/',
deployDetails$Data_ID[i], '_500Hz', sep = ""),
pattern = "\\_Noise_Log.xls", full.names = T)
# Create folder/directory to move the list above to
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/metadata/',
deployDetails$Data_ID[i], '/NoiseLogs', sep = "")))
newNoise <- file.path(paste('D:/PASCAL_RawData/manipulated/metadata/',
deployDetails$Data_ID[i], '/NoiseLogs', sep = ""))
# Copy list of files to new directory
file.copy(currentNoise, newNoise)
# Sets the progress bar to the current state
setTxtProgressBar(pb, i)
}
close(pb) # Close the connection
# Set up progress bar
pb <- txtProgressBar(min = 0,      # Minimum value of the progress bar
max = nrow(deployDetails), # Maximum value of the progress bar
style = 3,    # Progress bar style (also available style = 1 and style = 2)
width = 50,   # Progress bar width. Defaults to getOption("width")
char = "=")   # Character used to create the bar
# Loop to create drift specific GPS folders with
for (i in 1:nrow(deployDetails)) {
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/gps/',
deployDetails$Data_ID[i],sep = "")))
#GPS Data
# List of files I want to move
currentGPS <- list.files(paste('Z:/METADATA/PASCAL/',deployDetails$Data_ID[i],
'/',deployDetails$Data_ID[i],'_GPS_SPOT', sep = ""),
pattern = "\\_GPS.csv$", full.names = T)
# Create folder/directory to move the list above to
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/gps/',
deployDetails$Data_ID[i], sep = "")))
newGPS <- file.path(paste('D:/PASCAL_RawData/manipulated/gps/',
deployDetails$Data_ID[i], sep = ""))
# Copy list of files to new directory
file.copy(currentGPS, newGPS)
# Single depth document for location information for NCEI Passive Acoustic Data Viewer Map
depthDoc <- data.frame(depth_m = deployDetails$Deployment_Depth_m.[i])
write.csv(depthDoc, paste('D:/PASCAL_RawData/manipulated/gps/',deployDetails$Data_ID[i],'/',deployDetails$Data_ID[i],'_DeploymentDepth.csv', sep = ""), row.names = FALSE)
}
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/gps/',
deployDetails$Data_ID[i],sep = "")))
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/gps/',sep = "")))
# Set up progress bar
pb <- txtProgressBar(min = 0,      # Minimum value of the progress bar
max = nrow(deployDetails), # Maximum value of the progress bar
style = 3,    # Progress bar style (also available style = 1 and style = 2)
width = 50,   # Progress bar width. Defaults to getOption("width")
char = "=")   # Character used to create the bar
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/gps/',sep = "")))
# Loop to create drift specific GPS folders with
for (i in 1:nrow(deployDetails)) {
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/gps/',
deployDetails$Data_ID[i],sep = "")))
#GPS Data
# List of files I want to move
currentGPS <- list.files(paste('Z:/METADATA/PASCAL/',deployDetails$Data_ID[i],
'/',deployDetails$Data_ID[i],'_GPS_SPOT', sep = ""),
pattern = "\\_GPS.csv$", full.names = T)
# Create folder/directory to move the list above to
dir.create(file.path(paste('D:/PASCAL_RawData/manipulated/gps/',
deployDetails$Data_ID[i], sep = "")))
newGPS <- file.path(paste('D:/PASCAL_RawData/manipulated/gps/',
deployDetails$Data_ID[i], sep = ""))
# Copy list of files to new directory
file.copy(currentGPS, newGPS)
# Single depth document for location information for NCEI Passive Acoustic Data Viewer Map
depthDoc <- data.frame(depth_m = deployDetails$Deployment_Depth_m.[i])
write.csv(depthDoc, paste('D:/PASCAL_RawData/manipulated/gps/',deployDetails$Data_ID[i],'/',deployDetails$Data_ID[i],'_DeploymentDepth.csv', sep = ""), row.names = FALSE)
}
