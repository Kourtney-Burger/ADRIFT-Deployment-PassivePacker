---
title: "PassivePacker Deployment"
author: "Kourtney Burger"
date: "2023-10-05"
output: html_document
---

# GENERAL PLAN

0.  Manipulate data folder structure using DataFolderManipulation.Rmd to prepare data paths for passive packer
1.  Download Deployment Details spreadsheet and save to folder within project
2.  Manipulate Deployment Details spreadsheet to align with passive packer fields
3.  Add additional passive packer fields
4.  Connect to passive packer database and append it

# Required Packages

```{r}
library(here)
library(DBI)
library(RSQLite)
library(tidyverse)
library(rjson)
library(dplyr)
library(stringr)
```

# Set Working Directory

```{r}
DepDir <- here('ADRIFT-Deployment-PassivePacker')
```

# Taiki's helper function for dates

Helper function to create all the "2020-01-01T00:00:00" formatted date strings that JSON will want. *Note that this requires that you convert all your dates in the deploy details data that you read in earlier (or anywhere else you might read dates from) to POSIXct format.*

```{r}
posixToText <- function(x) {
    format(x, '%Y-%m-%dT%H:%M:%S')
}

posixToText(as.POSIXct("2018-11-22 08:28:24", tz='UTC'))
```

# Import and Prep Data

```{r}
# Import Deployment Details
deployDetails <- read.csv("DeploymentDetails Files/CCES_DeploymentDetails.csv")

# Change soundtrap names
deployDetails[deployDetails == 'ST640'] <- 'SoundTrap 640'
deployDetails[deployDetails == "ST4300HF"] <- "SoundTrap 4300 HF"
deployDetails[deployDetails == "ST300"] <- "SoundTrap 300"
deployDetails[deployDetails == "ST4300"] <- "SoundTrap 4300"
deployDetails[deployDetails == "ST500HF"] <- "SoundTrap 500 HF"
deployDetails[deployDetails == "ST300HF"] <- "SoundTrap 300 HF"

# ADDITIONAL DATA CLEANING
deployDetails$Data_Start <- as.POSIXct(deployDetails$Data_Start, format = "%m-%d-%Y %H:%M:%S", tz = 'UTC')
deployDetails$Data_End <- as.POSIXct(deployDetails$Data_End, format = "%m-%d-%Y %H:%M:%S", tz = 'UTC')

deployDetails$Deployment_Date <- as.POSIXct(deployDetails$Deployment_Date, format = "%m-%d-%Y %H:%M:%S", tz = 'UTC')
deployDetails$Recovery_Date <- as.POSIXct(deployDetails$Recovery_Date, format = "%m-%d-%Y %H:%M:%S", tz = 'UTC')

deployDetails$Quality_Category <- str_to_title(deployDetails$Quality_Category)

# Add depth sensor type column - couldn't get this to work, just changed it in excel :(
# deployDetails$Depth_Sensor_Type <- ''
# DepthSensor <- subset(deployDetails, select = c('Depth_Sensor', 'Depth_Sensor_Type'))
# 
# DepthSensor <- within(DepthSensor, Depth_Sensor <- 
#                         data.frame(do.call('rbind',
#                                            strsplit(as.character(Depth_Sensor),
#                                                     '-', fixed = TRUE))))
# colnames(DepthSensor) <- c('Name','ID','FullName')
# 
# if (DepthSensor$Depth_Sensor.X1 == '') {
#    DepthSensor$Depth_Sensor_Type = 'NA'
# } else{
#   if (DepthSensor$Depth_Sensor.X1 == 'OT') {
#     DepthSensor$Depth_Sensor_Type = 'Loggerhead Computers OpenTag'
#     } else{
#       DepthSensor$Depth_Sensor_Type = 'Lotek Archival Tag LAT-1400'
#       }
# }
#   
# DepthSensor$
#   
# if (DepthSensor$Depth_Sensor.X1 == 'OT') {
#    DepthSensor$Depth_Sensor_Type = 'Loggerhead Computers OpenTag'
#    } else{
#       DepthSensor$Depth_Sensor_Type = 'Lotek Archival Tag LAT-1400'
#       } 
# 
# Loggerhead Computers OpenTag
# Lotek Archival Tag LAT-1400

# convert numeric data to characters
deployDetails <- deployDetails %>%
        mutate(across(where(is.numeric), as.character))
```

```{r}
# Import Passive Packer data table 
db <- dbConnect(SQLite(), "PassivePacker_v.4.0.3-win64/database/packageData.sqlite")
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
```

```{r}
## Prepare data to append to Passive Packer table

### Subset data
dd <- subset(deployDetails, select = c('Project', 'DeploymentID', 'Cruise'))

### Add required columns
dd <- dd %>%
  add_column(ID = NA, SITE_OR_CRUISE = NA, PACKAGE_ID = NA, SOURCE_PATH = NA,
             DESTINATION_PATH = NA, METADATA_AUTHOR = 'Kourtney Burger', 
             META_AUTHOR_UUID = NA, PUBLICATION_DATE = NA, PLATFORM = NA, 
             INSTRUMENT_TYPE = NA, INSTRUMENT_ID = NA, DEPLOYMENT_ALIAS = NA,
             SITE_ALIAS = NA, DEPLOY_TIME = NA, AUDIO_START_TIME = NA,
             RECOVER_TIME =NA, AUDIO_END_TIME = NA, TITLE = "California Current Ecosystems Survey - Passive Acoustics Survey", 
             PURPOSE = "From Report", ABSTRACT = "From Report", DATA_COMMENT = NA, 
             TEMP_PATH = NA, BIO_PATH = NA, OTHER_PATH = NA, DOCS_PATH = "Y:/1651_CCES_2018/Report", 
             CALIBRATION_PATH = NA, CREATION_TIME = NA, UPDATE_TIME = NA, 
             USE = 'Y', SAMPLING_DETAILS = NA, QUALITY_DETAILS = NA, 
             SCIENTISTS = NA, SPONSERS = NA, FUNDERS = NA, SENSORS = NA, 
             DEPLOYMENT_DETAILS = NA, CALIBRATION_INFO = NA, DATASET_INFO = NA, 
             ANCILLARY_INFO = NA)

### Reorder and rename columns
dd <- dd[, c(4,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
             26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42)]

colnames(dd) <- c('ID','PROJECT','DEPLOYMENT_ID','SITE_CRUISE','SITE_OR_CRUISE',
                  'PACKAGE_ID','SOURCE_PATH','DESTINATION_PATH','METADATA_AUTHOR',
                  'META_AUTHOR_UUID','PUBLICATION_DATE','PLATFORM',
                  'INSTRUMENT_TYPE', 'INSTRUMENT_ID','DEPLOYMENT_ALIAS',
                  'SITE_ALIAS','DEPLOY_TIME', 'AUDIO_START_TIME','RECOVER_TIME',
                  'AUDIO_END_TIME','TITLE','PURPOSE','ABSTRACT','DATA_COMMENT',
                  'TEMP_PATH','BIO_PATH','OTHER_PATH','DOCS_PATH',
                  'CALIBRATION_PATH','CREATION_TIME','UPDATE_TIME','USE',
                  'SAMPLING_DETAILS','QUALITY_DETAILS','SCIENTISTS','SPONSORS',
                  'FUNDERS','SENSORS','DEPLOYMENT_DETAILS','CALIBRATION_INFO',
                  'DATASET_INFO','ANCILLARY_INFO') 

### Add ID Number (Primary Key) 
# If no existing data, maxID is 0
oldMax <- ifelse(nrow(ppdt) == 0, 0, max(ppdt$ID))
dd$ID <- (1:nrow(dd)) + oldMax

### Fix project and package_id fields
#(combine columns and remove spaces)
dd$PROJECT <- paste('SWFSC-',dd$PROJECT)
dd$PACKAGE_ID <- paste(dd$PROJECT,'_',dd$SITE_CRUISE,'_',dd$DEPLOYMENT_ID)
dd$PROJECT <- paste('["',dd$PROJECT,'"]')
dd$PROJECT <- gsub(" ","",dd$PROJECT)
dd$PACKAGE_ID <- gsub(" ","",dd$PACKAGE_ID)

### Dataset Description
dd$PURPOSE <- 'The 2018 California Current Ecosystem Survey (CCES) was a multidisciplinary survey of the marine ecosystem from southern British Columbia, Canada to northern Baja California, Mexico. This survey was a collaboration between the Southwest Fisheries Science Centerâ€™s (SWFSC) Fishery Resource Division (FRD) and Marine Mammal and Turtle Division (MMTD). The survey included oceanographic measurements, use of multi-frequency echosounders, surface trawls, vertically and obliquely integrating net tows, continuous underway fish egg sampling, visual line-transect surveys for marine mammals, photographic capture-recapture studies of marine mammals, strip transect surveys for seabirds, and passive acoustic surveys of marine mammals using Drifting Acoustic Spar Buoy Recorders (DASBRs). The recordings collected in this project have been analyzed to detect echolocation signals from beaked whales, sperm whales, and dwarf and pygmy sperm whales.'
dd$ABSTRACT <- 'The data from this deployment was collected using Drifting Acoustic Spar Buoy Recorders (DASBRs). DASBRs are free floating instruments with two hydrophones, in a vertical array, and a digital recorder. CCES 2018 was the second survey conducted under the Pacific Marine Assessment Program for Protected Species (PacMAPPS), supported by the National Oceanographic and Atmospheric Administration (NOAA), the US Navy, and the Bureau of Ocean Energy Management (BOEM). This study conducts annual cetacean and ecosystem surveys throughout the North Pacific and generates data products used by all three agencies to meet regulatory requirements pertaining to protected species.' 

### Set package destination (change once hard drive is ready)  
dd$DESTINATION_PATH <- 'F:/'
```

# JSON Strings

## Sampling Details Column

```{r}
for(i in 1:nrow(dd)) {
#  for(i in 1) {
  newSdList <- list(
    '1' = list(
        'channel_start' = posixToText(deployDetails$Data_Start[i]),
        'channel_end' = posixToText(deployDetails$Data_End[i]),
        'sensor' = deployDetails$ChannelNumber_1[i],
        'sampling details' = list(
            list(
                'type' = 'sample_rate_widget',
                'value_1' = deployDetails$SampleRate_kHz[i],
                'value_2' = '16',
                'checked' = FALSE,
                'start' = posixToText(deployDetails$Data_Start[i]),
                'end' = posixToText(deployDetails$Data_End[i])
            ),
            list(
                'type' = 'duty_cycle_widget',
                'value_1' = deployDetails$RecordingDuration_m[i],
                'value_2' = deployDetails$RecordingInterval_m[i],
                'checked' = FALSE,
                'start' = posixToText(deployDetails$Data_Start[i]),
                'end' = posixToText(deployDetails$Data_End[i])
            )
        )
    ),
    '2' = list(
        'channel_start' = posixToText(deployDetails$Data_Start[i]),
        'channel_end' = posixToText(deployDetails$Data_End[i]),
        'sensor' = deployDetails$ChannelNumber_2[i],
        'sampling details' = list(
            list(
                'type' = 'duty_cycle_widget',
                'value_1' = deployDetails$RecordingDuration_m[i],
                'value_2' = deployDetails$RecordingInterval_m[i],
                'checked' = FALSE,
                'start' = posixToText(deployDetails$Data_Start[i]),
                'end' = posixToText(deployDetails$Data_End[i])
            ),  
            list(
                'type' = 'sample_rate_widget',
                'value_1' = deployDetails$SampleRate_kHz[i],
                'value_2' = '16',
                'checked' = FALSE,
                'start' = posixToText(deployDetails$Data_Start[i]),
                'end' = posixToText(deployDetails$Data_End[i])
            )
        )
    )
)
  dd$SAMPLING_DETAILS[i] <- toJSON(newSdList)
}        
        
# Copy text from database 
sdText <- '{"1": {"channel_start": "2018-11-22T08:28:24", "channel_end": "2018-12-03T00:49:11", "sensor": "1", "sampling details": [{"type": "sample_rate_widget", "value_1": "576", "value_2": "16", "checked": false, "start": "2018-11-22T08:28:24", "end": "2018-12-03T00:49:11"}, {"type": "duty_cycle_widget", "value_1": "2", "value_2": "5", "checked": false, "start": "2018-11-22T08:28:24", "end": "2018-12-03T00:49:11"}]}, "2": {"channel_start": "2018-11-22T08:28:24", "channel_end": "2018-12-03T00:49:11", "sensor": "2", "sampling details": [{"type": "duty_cycle_widget", "value_1": "2", "value_2": "5", "checked": false, "start": "2018-11-22T08:28:24", "end": "2018-12-03T00:49:11"}, {"type": "sample_rate_widget", "value_1": "576", "value_2": "16", "checked": false, "start": "2018-11-22T08:28:24", "end": "2018-12-03T00:49:11"}]}}'



sdList <- fromJSON(sdText)
cat(toJSON(newSdList))
cat(toJSON(sdList))

# save newSdList to r list
#dd$SAMPLING_DETAILS[i] <- toJSON(newSdList)
  
# Comment once working
#view(newSdList)
#View(sdList) 
identical(newSdList,sdList)
```

## Quality Details Column

```{r}
for(i in 1:nrow(dd)) {
#  for(i in 1) {
    newQdList <- list(
      'analyst' = 'Cory Hom-Weaver',
      'analyst_uuid' = '8f9f3e13-3571-436d-b1fd-6e779acd9a9f',
      'quality_details' = list(
        list(
          'quality' = deployDetails$Quality_Category[i],
          'low_freq' = deployDetails$Quality_LowFreq[i],
          'high_freq' = deployDetails$Quality_HighFreq[i],# Fix for kHz high quality
          'start' = posixToText(deployDetails$Data_Start[i]),
          'end' = posixToText(deployDetails$Data_End[i]),
          'comments' = paste('Refer to ', deployDetails$Data_ID[i], '_500Hz_LF_Noise_Log.xls' , ' for detailed noise logs.', sep = ""),
          'channels' = list(
            1)
        )
      ),
      'method' = '',
      'objectives' = '',
      'abstract' = ''
    )
    
# save newQdList to r list
dd$QUALITY_DETAILS[i] <- toJSON(newQdList)
}

qdText <- '{"analyst": "Cory Hom-Weaver", "analyst_uuid": "8f9f3e13-3571-436d-b1fd-6e779acd9a9f", "quality_details": [{"quality": "Good", "low_freq": "20", "high_freq": "576000", "start": "2018-11-22T08:28:24", "end": "2018-12-03T00:49:11", "comments": "", "channels": [1]}], "method": "", "objectives": "", "abstract": ""}'

qdList <- fromJSON(qdText)
cat(toJSON(newQdList))
cat(toJSON(qdList))

# Comment once working
#view(newQdList)
#View(qdList) 
identical(newQdList,qdList)
```

## Scientists Column

```{r}
# This will be the same for each drift within a project
# PASCAL - Shannon Rankin & Jennifer McCullough
# CCES - Shannon Rankin and Anne Simonis
# ADRIFT - Shannon Rankin & Chief sci from deployment details

# Copy text from database 
sciText <- '[{"name": "Anne Simonis", "uuid": "3e9e1d2e-0fed-45d0-bc21-c388d4ea933a"}, {"name": "Shannon Rankin", "uuid": "c6a8953f-616b-4de1-99ce-3dd70e631dd5"}]'

for (i in 1:nrow(dd)) {
  newSciList <- list(
    list(
      'name' = 'Anne Simonis',
      'uuid' = '3e9e1d2e-0fed-45d0-bc21-c388d4ea933a'
    ),
    list(
      'name' = 'Shannon Rankin',
      'uuid' = 'c6a8953f-616b-4de1-99ce-3dd70e631dd5'
    )
  )

  dd$SCIENTISTS[i] <- toJSON(newSciList)
}

sciList <- fromJSON(sciText)
cat(toJSON(newSciList))
cat(toJSON(sciList))

# Comment once working
#view(newSciList)
#View(sciList) 
identical(newSciList,sciList)
```

## Sponsers Column

```{r}
# This will always be NOAA SWFSC

# Copy text from database 
sponText <- '[{"name": "NOAA SWFSC", "uuid": "918a8687-8b33-4f70-b550-79a5273866fa"}]'

for (i in 1:nrow(dd)) {
  newSponList <- list(
    list(
      'name' = 'NOAA SWFSC',
      'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
    )
  )

  dd$SPONSORS[i] <- toJSON(newSponList)
}

sponList <- fromJSON(sponText)
cat(toJSON(newSponList))
cat(toJSON(sponList))

# Comment once working
#view(newSponList)
#View(sponList) 
identical(newSponList,sponList)
```

## Funders Column

```{r}
# This will always be NOAA SWFSC

# Copy text from database 
funText <- '[{"name": "NOAA SWFSC", "uuid": "918a8687-8b33-4f70-b550-79a5273866fa"}, {"name": "BOEM", "uuid": "fee4d17a-a7dd-4f13-ade5-817b4f1fc86d"}, {"name": "US Navy Pacific Fleet Environmental Readiness Division", "uuid": "d246d0dc-b74b-4dc3-8d27-bdbb28b3e009"}]'

for (i in 1:nrow(dd)) {
  newFunList <- list(
    list(
      'name' = 'NOAA SWFSC',
      'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
    ),
    list(
      'name' = 'BOEM',
      'uuid' = 'fee4d17a-a7dd-4f13-ade5-817b4f1fc86d'
    ),
    list(
      'name' = 'US Navy Pacific Fleet Environmental Readiness Division',
      'uuid' = 'd246d0dc-b74b-4dc3-8d27-bdbb28b3e009'
    )
  )

  dd$FUNDERS[i] <- toJSON(newFunList)
}

funList <- fromJSON(funText)
cat(toJSON(newFunList))
cat(toJSON(funList))

# Comment once working
#view(newFunList)
#View(funList) 
identical(newFunList,funList)
```

## Sensors Column

```{r}
# A lot of this data has to come from the calibration sheet 
# For CCES, all calibration info is in 'CCES2018_CalibrationInfo.csv'
# For PASCAL, make spreadsheet from report
# For ADRIFT, use inventory spreadsheets

# read in data from calibration info spreadsheet
calInfo <- read.csv("Calibration Files/CCES2018_CalibrationInfo.csv")

# Copy text from database 
senText <- '{"0": {"type": "Audio Sensor", "number": "1", "id": "856048", "name": "HTI-92-WB", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "856048", "value_2": "", "description": ""}, "1": {"type": "Audio Sensor", "number": "2", "id": "856059", "name": "HTI-96-min", "pos_x": "", "pos_y": "", "pos_z": "-105", "value_1": "856059", "value_2": "", "description": ""}, "2": {"type": "Depth Sensor", "number": "3", "id": "NA", "name": "", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "", "value_2": "", "description": ""}, "3": {"type": "Other Sensor", "number": "4", "id": "A/B", "name": "SPOT", "pos_x": "", "pos_y": "", "pos_z": "+1", "value_1": "GPS", "value_2": "", "description": "2 SPOT sattelite GPS sensors"}}'

for(i in 1:nrow(dd)) {
#  for (i in 1) {
  newSenList <- list(
    '0' = list(
      'type' = 'Audio Sensor',
      'number' = '1',
      'id' = as.character(calInfo$SerialNumber_1[i]),
      'name' = calInfo$HydrophoneType_1[i],
      'pos_x' = '', 
      'pos_y' = '',
      'pos_z' = '-100', 
      'value_1' = as.character(calInfo$SerialNumber_1[i]),
      'value_2' = '',
      'description' = ''
    ),
    '1' = list(
      'type' = 'Audio Sensor',
      'number' = '2',
      'id' = as.character(calInfo$SerialNumber_2[i]),
      'name' = calInfo$HydrophoneType_2[i],
      'pos_x' = '', 
      'pos_y' = '',
      'pos_z' = '-105', 
      'value_1' = as.character(calInfo$SerialNumber_2[i]),
      'value_2' = '',
      'description' = ''
    ),
    '2' = list(
      'type' = 'Depth Sensor',
      'number' = '3',
      'id' = deployDetails$Depth_Sensor[i],
      'name' = deployDetails$DepthSensorType[i],
      'pos_x' = '', 
      'pos_y' = '',
      'pos_z' = '-100', 
      'value_1' = '',
      'value_2' = '',
      'description' = ''
    ),
    '3' = list(
      'type' = 'Other Sensor',
      'number' = '4',
      'id' = deployDetails$GPS_ID[i],
      'name' = deployDetails$GPS_Tracker[i],
      'pos_x' = '', 
      'pos_y' = '',
      'pos_z' = '+1', 
      'value_1' = 'GPS',
      'value_2' = '',
      'description' = '2 SPOT sattelite GPS sensors'
    )
  )
    
dd$SENSORS[i] <- toJSON(newSenList)
}

senList <- fromJSON(senText)
cat(toJSON(newSenList))
cat(toJSON(senList))

# Comment once working
#view(newSenList)
#View(senList) 
identical(newSenList,senList)
```

## Deployment Details Column

```{r}
for(i in 1:nrow(dd)) {
#  for (i in 1) {
    newDdList <- list(
      'DEPLOY_TYPE' = 'Mobile Marine',
      'SEA_AREA' = 'North Pacific Ocean',
      'DEPLOY_SHIP' = deployDetails$Deploy_Vessel[i],
      'FILES' = paste('Z:/METADATA/CCES_2018/',deployDetails$Data_ID[i],'/',deployDetails$Data_ID[i],'_GPS/',deployDetails$Data_ID[i],'_GPS.csv', sep = ""),
      'POSITION_DETAILS' = 'Satellite gps'
    )
    
dd$DEPLOYMENT_DETAILS[i] <- toJSON(newDdList)
}


# Copy text from database 
ddText <- '{"DEPLOY_TYPE": "Mobile Marine","SEA_AREA": "North Pacific Ocean","DEPLOY_SHIP": "R/V Ruben Lasker","FILES":"Z:/METADATA/CCES_2018/CCES_023/CCES_023_GPS/CCES_023_GPS.csv","POSITION_DETAILS": "Satellite gps"}'

ddList <- fromJSON(ddText)
cat(toJSON(newDdList))
cat(toJSON(ddList))

# Comment once working
#view(newDdList)
#View(ddList) 
identical(newDdList,ddList)
```

## Calibration info column

```{r}
for(i in 1:nrow(dd)) {
  newCalList <- list(
    'CAL_STATE' = 'Factory Calibrated',
    'CAL_DOCS_PATH' = 'C:/Users/kourtney.burger/Documents/GitHub/ADRIFT-Deployment-PassivePacker/Calibration info', 
    'SENSITIVITY' = '',
    'FREQUENCY' = '',
    'GAIN' = '',
    'COMMENT' = 'This dataset is composed of multichannel recorders with different types of hydrophones, each with its own unique sensitivity and frequency range. For the detailed calibration information refer to the CCES2018_CalibrationInfo.csv spreadsheet.'
    )
dd$CALIBRATION_INFO[i] <- toJSON(newCalList)
}

# Copy text from database 
calText <- '{"CAL_STATE": "Factory Calibrated", "CAL_DOCS_PATH": "C:/Users/kourtney.burger/Documents/GitHub/ADRIFT-Deployment-PassivePacker/Calibration info", "SENSITIVITY": "", "FREQUENCY": "", "GAIN": "", "COMMENT": "This dataset is composed of multichannel recorders with different types of hydrophones, each with its own unique sensitivity and frequency range. For the detailed calibration information refer to the CCES2018_CalibrationInfo.csv spreadsheet."}'

calList <- fromJSON(calText)
cat(toJSON(newCalList))
cat(toJSON(calList))

# comment once working
#view(newCalList)
#View(calList) 
identical(newCalList,calList)
```

## Dataset info column

```{r}
for(i in 1:nrow(dd)) {
#  for (i in 1) {
  newDiList <- list(
    'TYPE' = 'Raw',
    'SUB_TYPE' = 'Audio',
    'PLATFORM' = 'Drifter',
    'INSTRUMENT_TYPE' = deployDetails$Type[i],
    'INSTRUMENT_ID' = deployDetails$Instrument_ID[i],
    'DEPLOYMENT_TIME' = posixToText(deployDetails$Deployment_Date[i]),
    'RECOVERY_TIME' = posixToText(deployDetails$Recovery_Date[i]),
    'AUDIO_START' = posixToText(deployDetails$Data_Start[i]),
    'AUDIO_END' = posixToText(deployDetails$Data_End[i]),
    'SOURCE_PATH' =  paste('F:/CCES_RawData/manipulated/audio/',deployDetails$Data_ID[i], sep = ""), 
    'DATA_COMMENT' = deployDetails$Notes[i]
  )
dd$DATASET_INFO[i] <- toJSON(newDiList)
}

# Copy text from database 
# Copy text from database 
diText <- '{"TYPE": "Raw","SUB_TYPE": "Audio","PLATFORM": "Drifter","INSTRUMENT_TYPE": "SoundTrap 4300 HF","INSTRUMENT_ID": "1208791071","DEPLOYMENT_TIME": "2018-11-22T08:10:00","RECOVERY_TIME": "2018-12-03T00:25:00","AUDIO_START": "2018-11-22T08:28:24","AUDIO_END": "2018-12-03T00:49:11","SOURCE_PATH":"","DATA_COMMENT": "no depth data, Low frequency strumming and knocking under 50 Hz, ship noise under 250 Hz"}'

diList <- fromJSON(diText)
cat(toJSON(newDiList))
cat(toJSON(diList))

# comment once working
#view(newDiList)
#View(diList) #comment once running full loop
identical(newDiList,diList)
```

## Ancillary Info Column

```{r}
for(i in 1:nrow(dd)) {
  newAncilList <- list(
    'BIO_PATH' = "",
    'OTHER_PATH' = paste('F:/CCES_RawData/manipulated/metadata/', deployDetails$Data_ID[i], sep = ""),
    'TEMP_PATH' = paste('F:/CCES_RawData/manipulated/temp/', deployDetails$Data_ID[i], sep = "")
  )

dd$ANCILLARY_INFO[i] <- toJSON(newAncilList)
}


ancilText <- '{"BIO_PATH":"","OTHER_PATH":"F:/CCES_RawData/manipulated/metadata/CCES_023","TEMP_PATH":"F:/CCES_RawData/manipulated/temp/CCES_023"}'

ancilList <- fromJSON(ancilText)
cat(toJSON(newAncilList))
cat(toJSON(ancilList))

# comment once working
#view(newAncilList)
#View(ancilList) #comment once running full loop
identical(newAncilList,ancilList)
```

# Append to passive packer table

```{r}
con <- dbConnect(SQLite(), "PassivePacker_v.4.0.3-win64/database/packageData.sqlite")
dbAppendTable(con, 'DEPLOYMENT_DATA', dd)
dbDisconnect(con)
```