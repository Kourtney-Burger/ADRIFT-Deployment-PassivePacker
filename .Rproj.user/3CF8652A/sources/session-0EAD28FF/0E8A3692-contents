---
title: "SoundscapeMetrics_PassivePacker"
author: "Kourtney Burger"
date: "2024-02-12"
output: html_document
---

# Required Packages

```{r, echo=FALSE}
library(here)
library(DBI)
library(RSQLite)
library(tidyverse)
library(rjson)
library(dplyr)
library(stringr)
```

# Set Working Directory

```{r, echo=FALSE}
DepDir <- here('ADRIFT-Deployment-PassivePacker/Soundscape Metrics')
```

# Taiki's helper function for dates

Helper function to create all the "2020-01-01T00:00:00" formatted date strings that JSON will want. *Note that this requires that you convert all your dates in the deploy details data that you read in earlier (or anywhere else you might read dates from) to POSIXct format.*

```{r}
posixToText <- function(x) {
    format(x, '%Y-%m-%dT%H:%M:%S')
}

#TEST
#posixToText(as.POSIXct("2018-11-22 08:28:24", tz='UTC'))
```

# Import and Prep Data
## Import Deployment Details

```{r}
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
```

## Remove Unusable Drifts
```{r}
# Subset to remove non ADRIFT deployments (do not need to run if only packaging ADRIFT deployments)
deployDetails <- subset(deployDetails, Project == "ADRIFT")

# Subset to remove planned, incomplete, and lost drifts
names(deployDetails)[10] <- "Status"
deployDetails <- subset(deployDetails, Status == "Complete")

# Subset to remove unusable drifts (Check data and ensure it cannot be used for ANYTHING, some 'bad' data could be used for high frequency)
deployDetails <- subset(deployDetails, Quality_Category != "Unusable")

# Subset any drifts that used SM2 or SM3 recorders
deployDetails <- subset(deployDetails, Type != c('SM2Bat','SM3M'))

# Remove any additional drifts that did not have sound level metrics calculated
# deployDetails <- deployDetails[-c(), ]
```

## Clean Data
```{r}
# Change soundtrap names
deployDetails[deployDetails == "ST640"] <- "SoundTrap 640"
deployDetails[deployDetails == "ST4300HF"] <- "SoundTrap 4300 High Frequency"
deployDetails[deployDetails == "ST300"] <- "SoundTrap 300"
deployDetails[deployDetails == "ST4300STD"] <- "SoundTrap 4300"
deployDetails[deployDetails == "ST500HF"] <- "SoundTrap 500 High Frequency"
deployDetails[deployDetails == "ST300HF"] <- "SoundTrap 300 High Frequency"
```

```{r}
# Change Site Names
deployDetails[deployDetails == "WAS"] <- "Washington"
deployDetails[deployDetails == "COL"] <- "Columbia River"
deployDetails[deployDetails == "ORE"] <- "Oregon"
deployDetails[deployDetails == "HUM"] <- "Humboldt"
deployDetails[deployDetails == "MND"] <- "Mendocino"
deployDetails[deployDetails == "PTA"] <- "Point Arena"
deployDetails[deployDetails == "SFB"] <- "San Francisco Bay"
deployDetails[deployDetails == "HMB"] <- "Half Moon Bay"
deployDetails[deployDetails == "MBY"] <- "Monterey Bay"
deployDetails[deployDetails == "MOB"] <- "Morro Bay"
deployDetails[deployDetails == "CHI"] <- "Channel Islands"
deployDetails[deployDetails == "LAB"] <- "Los Angeles Basin"
deployDetails[deployDetails == "SND"] <- "San Diego"
deployDetails[deployDetails == "BCN"] <- "Baja California Norte"
deployDetails[deployDetails == "BCS"] <- "Baja California Sur"
```


```{r}
# Fix date formats
# `format =` argument -> format needs to match the way the data is currently stored (should be %m/%d/%Y %H:%M:%S)
names(deployDetails)[37] <- "Data_Start"
names(deployDetails)[38] <- "Data_End"
deployDetails$Data_Start <- as.POSIXct(deployDetails$Data_Start, format = "%m/%d/%Y %H:%M:%S", tz = 'UTC')
deployDetails$Data_End <- as.POSIXct(deployDetails$Data_End, format = "%m/%d/%Y %H:%M:%S", tz = 'UTC')

deployDetails$Deployment_Date_UTC <- as.POSIXct(deployDetails$Deployment_Date_UTC, format = "%m/%d/%Y %H:%M", tz = 'UTC')
deployDetails$Recovery_Date_UTC <- as.POSIXct(deployDetails$Recovery_Date_UTC, format = "%m/%d/%Y %H:%M", tz = 'UTC')

deployDetails$Date..UTC <- as.Date(deployDetails$Date..UTC, "%m/%d/%Y")
```


```{r}
# Reorder drifts 
deployDetails <- deployDetails %>% arrange(DeploymentID)
```


```{r}
# Make all data characters
deployDetails <- deployDetails %>%
        mutate(across(where(is.numeric), as.character))
```

# Prep Passive Packer Data Table
## Import Passive Packer data table
```{r}
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
```

## Prepare data table to append to Passive Packer table
```{r}
# Subset data
dd <- subset(deployDetails, select = c('Project', 'DeploymentID', 'Cruise'))

# Add required columns
# Change METADATA_AUTHOR and METADATA_AUTHOR_UUID to whoever is packaging data
# Change TITLE to full project name
dd <- dd %>%
  add_column(ID = NA, SITE_CRUISE = NA, PACKAGE_ID = NA, SOURCE_PATH = NA,
             DESTINATION_PATH = NA, METADATA_AUTHOR = 'Kourtney Burger', 
             META_AUTHOR_UUID = '2a603700-144e-442c-bbb5-27c40363819a', 
             PUBLICATION_DATE = NA, PLATFORM = NA, INSTRUMENT_TYPE = NA, 
             INSTRUMENT_ID = NA, DEPLOYMENT_ALIAS = NA, SITE_ALIAS = NA, 
             DEPLOY_TIME = NA, AUDIO_START_TIME = NA, RECOVER_TIME =NA, 
             AUDIO_END_TIME = NA, TITLE = "ADRIFT In the California Current", 
             PURPOSE = NA, ABSTRACT = NA, DATA_COMMENT = NA, TEMP_PATH = NA, 
             BIO_PATH = NA, OTHER_PATH = NA, DOCS_PATH = NA, CALIBRATION_PATH = NA,
             CREATION_TIME = NA, UPDATE_TIME = NA, USE = 'Y', SAMPLING_DETAILS = NA, 
             QUALITY_DETAILS = NA, SCIENTISTS = NA, SPONSORS = NA, FUNDERS = NA, 
             SENSORS = NA, DEPLOYMENT_DETAILS = NA, CALIBRATION_INFO = NA, 
             DATASET_INFO = NA, ANCILLARY_INFO = NA)

# Reorder and rename columns
dd <- dd[, c(4,1,2,5,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
             26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42)]

names(dd)[2] <- "PROJECT"
names(dd)[3] <- "DEPLOYMENT_ID"
names(dd)[5] <- "SITE_OR_CRUISE"

# Add ID Number (Primary Key) 
# If no existing data, maxID is 0
oldMax <- ifelse(nrow(ppdt) == 0, 0, max(ppdt$ID))
dd$ID <- (1:nrow(dd)) + oldMax

# Fix project and package_id fields
#(combine columns and remove spaces)
dd$PROJECT <- paste('SWFSC-',dd$PROJECT)
dd$PACKAGE_ID <- paste(dd$PROJECT,'_',dd$DEPLOYMENT_ID)
dd$PROJECT <- paste('["',dd$PROJECT,'"]')
dd$PROJECT <- gsub(" ","",dd$PROJECT)
dd$PACKAGE_ID <- gsub(" ","",dd$PACKAGE_ID)

# Add Publication Date
for (i in 1:nrow(deployDetails)) {
  deployDate <- deployDetails$Date..UTC[i]
  
  pubDate <- deployDate %m+% years(2)
  
  pubDate <- as.character(pubDate)
  
  dd$PUBLICATION_DATE[i] <- pubDate
}

# Add site alias
for (i in 1:nrow(deployDetails)) {
  dd$SITE_ALIAS[i] <- deployDetails$Site[i]
}

# Dataset Description
dd$PURPOSE <- 'ADRIFT in the California Current uses passive acoustic drifting buoys to study ocean sound in the California Current Ecosystem. The relatively low-cost buoys can be deployed and recovered from most vessels, including: research, fishing, and tourist boats. They drift autonomously and can be monitored shoreside via a satellite messenger. Data collected through the ADRIFT project will be used to assess noise levels and seasonal marine mammal acoustic presence in the California Current.'
dd$ABSTRACT <- '' 

# Set package destination (change to appropriate file path)  
dd$DESTINATION_PATH <- 'G:/Soundscape Metrics/Packaged Data'
```


# JSON Strings

## Quality Details Column

```{r}
for(i in 1:nrow(dd)) {
    newQdList <- list(
      'analyst' = deployDetails$Quality_Analyst[i],
      'analyst_uuid' = '8f9f3e13-3571-436d-b1fd-6e779acd9a9f',
      'quality_details' = list(
        list(
          'quality' = 'Good',
          'low_freq' = deployDetails$Quality_LowFreq[i],
          'high_freq' = deployDetails$Quality_HighFreq[i],
          'start' = posixToText(deployDetails$Data_Start[i]),
          'end' = posixToText(deployDetails$Data_End[i]),
          'comments' = paste('Refer to ', deployDetails$Data_ID[i], '_500Hz_LF_Noise_Log.xls' , ' for detailed noise logs.', sep = ""),
          'channels' = list(
           1)
        )
      ),
      'method' = '',
      'objectives' = '',
      'abstract' = ''
    )
    
# save newQdList to r list
dd$QUALITY_DETAILS[i] <- toJSON(newQdList)
}
```


## Scientists Column

```{r}
for (i in 1:nrow(dd)) {
# for(i in 64) {
  newSciList <- list(
    list(
      'name' = 'Anne Simonis',
      'uuid' = '3e9e1d2e-0fed-45d0-bc21-c388d4ea933a'
    )
  )

  dd$SCIENTISTS[i] <- toJSON(newSciList)
}


# Comment once working
# Copy text from database 
# sciText <- '[{"name": "Shannon Rankin", "uuid": ""}, {"name": "Eric Bjorkstedt", "uuid": ""}]'
# sciList <- fromJSON(sciText)
# cat(toJSON(newSciList))
# cat(toJSON(sciList))
# view(newSciList)
# View(sciList)
# identical(newSciList,sciList)
```

## Sponsers Column

```{r}
for (i in 1:nrow(dd)) {
#  for (i in 64) {
    newSponList <- list(
    list(
      'name' = 'NOAA SWFSC',
      'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
    )
  )

  dd$SPONSORS[i] <- toJSON(newSponList)
}
```

## Funders Column

```{r}
for (i in 1:nrow(dd)) {
#  for (i in 64) {
    
  newFunList <- list(
    list(
      'name' = 'NOAA SWFSC',
      'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
    ),
    list(
      'name' = 'BOEM',
      'uuid' = 'fee4d17a-a7dd-4f13-ade5-817b4f1fc86d'
    )
  )

  dd$FUNDERS[i] <- toJSON(newFunList)
}
```

## Deployment Details Column

```{r}
for(i in 1:nrow(dd)) {
#  for (i in 64) {
    newDdList <- list(
      'DEPLOY_TYPE' = 'Mobile Marine',
      'SEA_AREA' = 'North Pacific Ocean',
      'DEPLOY_SHIP' = deployDetails$Deploy.Vessel[i],
      'FILES' = paste('G:/ADRIFT_RawData/manipulated/gps/',deployDetails$Data_ID[i],"/",deployDetails$Data_ID[i],'_GPS.csv',',','G:/ADRIFT_RawData/manipulated/gps/',deployDetails$Data_ID[i],'/',deployDetails$Data_ID[i],'_DeploymentDepth.csv', sep = ""),
      'POSITION_DETAILS' = 'Solar Satellite GPS'
    )
    
dd$DEPLOYMENT_DETAILS[i] <- toJSON(newDdList)
}
```

## IN PROGRESS - Calibration info column

```{r}
for(i in 1:nrow(dd)) {
  newCalList <- list(
    'CAL_STATE' = 'Calibration applied before processing',
    'CAL_DOCS_PATH' = paste("G:/Soundscape Metrics/Data/Manipulated/Cal files"), 
    'SENSITIVITY' = '',
    'FREQUENCY' = '',
    'GAIN' = '',
    'COMMENT' = ''
    )
dd$CALIBRATION_INFO[i] <- toJSON(newCalList)
}

# {"CAL_STATE": "Calibration applied before processing", "CAL_DOCS_PATH": "G:/Soundscape Metrics/Data/Manipulated/Cal files", "SENSITIVITY": "", "FREQUENCY": "", "GAIN": "", "COMMENT": "Enter a description of the calibration method and any other details relevant to the instruments calibration."}
```


## IN PROGRESS - Dataset info column

```{r}
for(i in 1:nrow(dd)) {
#  for (i in 64) {
  newDiList <- list(
    'TYPE' = 'Product',
    'SUB_TYPE' = 'Sound Level Metrics',
    'PLATFORM' = 'Drifter',
    'INSTRUMENT_TYPE' = deployDetails$Type[i],
    'INSTRUMENT_ID' = '',
    'DEPLOYMENT_TIME' = '',
    'RECOVERY_TIME' = ,
    'AUDIO_START' = posixToText(deployDetails$Data_Start[i]),
    'AUDIO_END' = posixToText(deployDetails$Data_End[i]),
    'SOURCE_PATH' =  paste('G:/Soundscape Metrics/Data/Manipulated',deployDetails$Data_ID[i], sep = ""),
    'DATA_FILES' = paste('G:/Soundscape Metrics/Data/Manipulated',deployDetails$Data_ID[i], sep = ""),
    'ANALYSIS_TIME_ZONE' = '-8',
    'ANALYSIS_EFFORT' = '3600',
    'MIN_ANALYSIS_FREQUENCY' = '100',
    'MAX_ANALYSIS_FREQUENCY' = '2400',
    'ANALYSIS_SAMPLE_RATE' = '19200',
    'SOFTWARE_NAME' = 'Triton-MATLAB',
    'SOFTWARE_VERSION' = 'triton1.93.20160524',
    'PROTOCOL_REFERENCE' = 'citation of citation DOI',
    'PROCESSING_STATEMENT' = 'Enter a description of the process that was conducted to obtain the\nsound levels.',
    'SOFTWARE_STATEMENT' = 'Write a description of the software used to create the sound levels',
    'ANALYSIS_START' = '',
    'ANALYSIS_END' = ''
    )
  
dd$DATASET_INFO[i] <- toJSON(newDiList)
}

#{"TYPE": "Product", "SUB_TYPE": "Sound Level Metrics", "PLATFORM": "Drifter", "INSTRUMENT_TYPE": "Soundtrap 640", "INSTRUMENT_ID": "", "DEPLOYMENT_TIME": "", "RECOVERY_TIME": "", "AUDIO_START": "2023-11-06T21:41:59", "AUDIO_END": "2023-11-10T21:24:00", "SOURCE_PATH": "G:/Soundscape Metrics/Data/Manipulated", "DATA_FILES": "G:/Soundscape Metrics/Data/Manipulated", "ANALYSIS_TIME_ZONE": "-8", "ANALYSIS_EFFORT": "3600", "MIN_ANALYSIS_FREQUENCY": "100", "MAX_ANALYSIS_FREQUENCY": "24000", "ANALYSIS_SAMPLE_RATE": "192000", "SOFTWARE_NAME": "Triton-MATLAB", "SOFTWARE_VERSION": "triton1.93.20160524", "PROTOCOL_REFERENCE": "citation or citation DOI", "PROCESSING_STATEMENT": "Enter a description of the process that was conducted to obtain the\nsound levels.", "SOFTWARE_STATEMENT": "Write a description of the software used to create the sound levels", "ANALYSIS_START": "2010-01-01T13:00:00", "ANALYSIS_END": "2010-01-01T13:00:00"}
```


## Ancillary Info Column

```{r}
for(i in 1:nrow(dd)) {
#  for (i in 64) {
    newAncilList <- list(
    'BIO_PATH' = "",
    'OTHER_PATH' = "",
    'TEMP_PATH' = ""
  )

dd$ANCILLARY_INFO[i] <- toJSON(newAncilList)
}
```

# Append to passive packer table

```{r}
con <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
dbAppendTable(con, 'DEPLOYMENT_DATA', dd)
dbDisconnect(con)
```