---
title: "ADRIFT Specific PassivePacker Deployment"
author: "Kourtney Burger"
date: "2023-11-01"
output: html_document
---

# GENERAL PLAN

0.  Manipulate data folder structure using 'ADRIFTDataFolderManipulation.Rmd' to prepare data paths for passive packer
1.  Download Deployment Details spreadsheet and save to folder within project
2.  Manipulate Deployment Details spreadsheet to align with passive packer fields
3.  Add additional passive packer fields
4.  Connect to passive packer database and append it

# Required Packages

```{r, echo=FALSE}
library(here)
library(DBI)
library(RSQLite)
library(tidyverse)
library(rjson)
library(dplyr)
library(stringr)
```

# Set Working Directory

```{r, echo=FALSE}
DepDir <- here('ADRIFT-Deployment-PassivePacker')
```

# Taiki's helper function for dates

Helper function to create all the "2020-01-01T00:00:00" formatted date strings that JSON will want. *Note that this requires that you convert all your dates in the deploy details data that you read in earlier (or anywhere else you might read dates from) to POSIXct format.*

```{r}
posixToText <- function(x) {
    format(x, '%Y-%m-%dT%H:%M:%S')
}

#TEST
#posixToText(as.POSIXct("2018-11-22 08:28:24", tz='UTC'))
```

# Import and Prep Data

1.  Check BABS to see which drifts remain unpackaged
2.  Download unpackaged drifts from [deployment details spreadsheet](https://docs.google.com/spreadsheets/d/10bxlwfVOe1LFfj69B_YddxcA0V14m7codYwgD2YncFk/edit#gid=395545420) and save as `ADRIFT_DeploymentDetails.csv`
3.  Import and manipulate data by following the code below

## Import Deployment Details

```{r}
deployDetails <- read.csv(here("DeploymentDetailsFiles","ADRIFT_DeploymentDetails.csv"))
```

## Remove Unusable Drifts
```{r}
# Subset to remove non ADRIFT deployments (do not need to run if only packaging ADRIFT deployments)
deployDetails <- subset(deployDetails, Project == "ADRIFT")

# Subset to remove planned, incomplete, and lost drifts
names(deployDetails)[10] <- "Status"
deployDetails <- subset(deployDetails, Status == "Complete")

# Subset to remove unusable drifts (Check data and ensure it cannot be used for ANYTHING, some 'bad' data could be used for high frequency)
deployDetails <- subset(deployDetails, Quality_Category != "Unusable")
```

## Clean Data
```{r}
# Change soundtrap names
deployDetails[deployDetails == "ST640"] <- "SoundTrap 640"
deployDetails[deployDetails == "ST4300HF"] <- "SoundTrap 4300 High Frequency"
deployDetails[deployDetails == "ST300"] <- "SoundTrap 300"
deployDetails[deployDetails == "ST4300STD"] <- "SoundTrap 4300"
deployDetails[deployDetails == "ST500HF"] <- "SoundTrap 500 High Frequency"
deployDetails[deployDetails == "ST300HF"] <- "SoundTrap 300 High Frequency"
```

```{r}
# Change Site Names
deployDetails[deployDetails == "WAS"] <- "Washington"
deployDetails[deployDetails == "COL"] <- "Columbia River"
deployDetails[deployDetails == "ORE"] <- "Oregon"
deployDetails[deployDetails == "HUM"] <- "Humboldt"
deployDetails[deployDetails == "MND"] <- "Mendocino"
deployDetails[deployDetails == "PTA"] <- "Point Arena"
deployDetails[deployDetails == "SFB"] <- "San Francisco Bay"
deployDetails[deployDetails == "HMB"] <- "Half Moon Bay"
deployDetails[deployDetails == "MBY"] <- "Monterey Bay"
deployDetails[deployDetails == "MOB"] <- "Morro Bay"
deployDetails[deployDetails == "CHI"] <- "Channel Islands"
deployDetails[deployDetails == "LAB"] <- "Los Angeles Basin"
deployDetails[deployDetails == "SND"] <- "San Diego"
deployDetails[deployDetails == "BCN"] <- "Baja California Norte"
deployDetails[deployDetails == "BCS"] <- "Baja California Sur"
```


```{r}
# Fix date formats
# `format =` argument -> format needs to match the way the data is currently stored (should be %m/%d/%Y %H:%M:%S)
names(deployDetails)[37] <- "Data_Start"
names(deployDetails)[38] <- "Data_End"
deployDetails$Data_Start <- as.POSIXct(deployDetails$Data_Start, format = "%m/%d/%Y %H:%M:%S", tz = 'UTC')
deployDetails$Data_End <- as.POSIXct(deployDetails$Data_End, format = "%m/%d/%Y %H:%M:%S", tz = 'UTC')

deployDetails$Deployment_Date_UTC <- as.POSIXct(deployDetails$Deployment_Date_UTC, format = "%m/%d/%Y %H:%M", tz = 'UTC')
deployDetails$Recovery_Date_UTC <- as.POSIXct(deployDetails$Recovery_Date_UTC, format = "%m/%d/%Y %H:%M", tz = 'UTC')

deployDetails$Date..UTC <- as.Date(deployDetails$Date..UTC, "%m/%d/%Y")
```

```{r}
#Create chief sci column
deployDetails <- deployDetails %>%
  separate(Personnel, c("ChiefSci", "AdditionalPersonnel"), sep = ",", extra = "merge")
```

```{r}
# Reorder drifts 
deployDetails <- deployDetails %>% arrange(DeploymentID)
```


```{r}
# Make all data characters
deployDetails <- deployDetails %>%
        mutate(across(where(is.numeric), as.character))
```

# Prep Passive Packer Data Table
## Import Passive Packer data table
```{r}
db <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
ppdt <- dbReadTable(db, "DEPLOYMENT_DATA")
dbDisconnect(db)
```

## Prepare data table to append to Passive Packer table
```{r}
# Subset data
dd <- subset(deployDetails, select = c('Project', 'DeploymentID', 'Cruise'))

# Add required columns
# Change METADATA_AUTHOR and METADATA_AUTHOR_UUID to whoever is packaging data
# Change TITLE to full project name
dd <- dd %>%
  add_column(ID = NA, SITE_CRUISE = NA, PACKAGE_ID = NA, SOURCE_PATH = NA,
             DESTINATION_PATH = NA, METADATA_AUTHOR = 'Kourtney Burger', 
             META_AUTHOR_UUID = '2a603700-144e-442c-bbb5-27c40363819a', 
             PUBLICATION_DATE = NA, PLATFORM = NA, INSTRUMENT_TYPE = NA, 
             INSTRUMENT_ID = NA, DEPLOYMENT_ALIAS = NA, SITE_ALIAS = NA, 
             DEPLOY_TIME = NA, AUDIO_START_TIME = NA, RECOVER_TIME =NA, 
             AUDIO_END_TIME = NA, TITLE = "ADRIFT In the California Current", 
             PURPOSE = NA, ABSTRACT = NA, DATA_COMMENT = NA, TEMP_PATH = NA, 
             BIO_PATH = NA, OTHER_PATH = NA, DOCS_PATH = NA, CALIBRATION_PATH = NA,
             CREATION_TIME = NA, UPDATE_TIME = NA, USE = 'Y', SAMPLING_DETAILS = NA, 
             QUALITY_DETAILS = NA, SCIENTISTS = NA, SPONSORS = NA, FUNDERS = NA, 
             SENSORS = NA, DEPLOYMENT_DETAILS = NA, CALIBRATION_INFO = NA, 
             DATASET_INFO = NA, ANCILLARY_INFO = NA)

# Reorder and rename columns
dd <- dd[, c(4,1,2,5,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
             26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42)]

names(dd)[2] <- "PROJECT"
names(dd)[3] <- "DEPLOYMENT_ID"
names(dd)[5] <- "SITE_OR_CRUISE"

# Add ID Number (Primary Key) 
# If no existing data, maxID is 0
oldMax <- ifelse(nrow(ppdt) == 0, 0, max(ppdt$ID))
dd$ID <- (1:nrow(dd)) + oldMax

# Fix project and package_id fields
#(combine columns and remove spaces)
dd$PROJECT <- paste('SWFSC-',dd$PROJECT)
dd$PACKAGE_ID <- paste(dd$PROJECT,'_',dd$DEPLOYMENT_ID)
dd$PROJECT <- paste('["',dd$PROJECT,'"]')
dd$PROJECT <- gsub(" ","",dd$PROJECT)
dd$PACKAGE_ID <- gsub(" ","",dd$PACKAGE_ID)

# Add Publication Date
for (i in 1:nrow(deployDetails)) {
  deployDate <- deployDetails$Date..UTC[i]
  
  pubDate <- deployDate %m+% years(2)
  
  pubDate <- as.character(pubDate)
  
  dd$PUBLICATION_DATE[i] <- pubDate
}

# Add site alias
for (i in 1:nrow(deployDetails)) {
  dd$SITE_ALIAS[i] <- deployDetails$Site[i]
}

# Dataset Description
dd$PURPOSE <- 'ADRIFT in the California Current uses passive acoustic drifting buoys to study ocean sound in the California Current Ecosystem. The relatively low-cost buoys can be deployed and recovered from most vessels, including: research, fishing, and tourist boats. They drift autonomously and can be monitored shoreside via a satellite messenger. Data collected through the ADRIFT project will be used to assess noise levels and seasonal marine mammal acoustic presence in the California Current.'
dd$ABSTRACT <- '' 

# Set package destination (change to appropriate file path)  
dd$DESTINATION_PATH <- 'G:/Packaged Drifts'
```


# JSON Strings

## Sampling Details Column

```{r}
for(i in 1:nrow(dd)) {
#  for(i in 64) {
  newSdList <- list(
    '1' = list(
        'channel_start' = posixToText(deployDetails$Data_Start[i]),
        'channel_end' = posixToText(deployDetails$Data_End[i]),
        'sensor' = deployDetails$ChannelNumber_1[i],
        'sampling details' = list(
            list(
                'type' = 'sample_rate_widget',
                'value_1' = deployDetails$SampleRate_kHz[i],
                'value_2' = '16',
                'checked' = FALSE,
                'start' = posixToText(deployDetails$Data_Start[i]),
                'end' = posixToText(deployDetails$Data_End[i])
            ),
            list(
                'type' = 'duty_cycle_widget',
                'value_1' = deployDetails$RecordingDuration_m[i],
                'value_2' = deployDetails$RecordingInterval_m[i],
                'checked' = FALSE,
                'start' = posixToText(deployDetails$Data_Start[i]),
                'end' = posixToText(deployDetails$Data_End[i])
            )
        )
    ),
    '2' = list(
        'channel_start' = posixToText(deployDetails$Data_Start[i]),
        'channel_end' = posixToText(deployDetails$Data_End[i]),
        'sensor' = deployDetails$ChannelNumber_2[i],
        'sampling details' = list(
         list(
                'type' = 'sample_rate_widget',
                'value_1' = deployDetails$SampleRate_kHz[i],
                'value_2' = '16',
                'checked' = FALSE,
                'start' = posixToText(deployDetails$Data_Start[i]),
                'end' = posixToText(deployDetails$Data_End[i])
              ),  
          list(
                'type' = 'duty_cycle_widget',
                'value_1' = deployDetails$RecordingDuration_m[i],
                'value_2' = deployDetails$RecordingInterval_m[i],
                'checked' = FALSE,
                'start' = posixToText(deployDetails$Data_Start[i]),
                'end' = posixToText(deployDetails$Data_End[i])
            )
        )
    )
)
  dd$SAMPLING_DETAILS[i] <- toJSON(newSdList)
}        


# Comment once working        
# Copy text from database 
# sdText <- '{"1": {"channel_start": "2023-10-05T23:29:58", "channel_end": "2023-10-06T23:23:58", "sensor": "1", "sampling details": [{"type": "sample_rate_widget", "value_1": "384", "value_2": "16", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}, {"type": "duty_cycle_widget", "value_1": "6", "value_2": "6", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}]}, "2": {"channel_start": "2023-10-05T23:29:58", "channel_end": "2023-10-06T23:23:58", "sensor": "2", "sampling details": [{"type": "sample_rate_widget", "value_1": "384", "value_2": "16", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}, {"type": "duty_cycle_widget", "value_1": "6", "value_2": "6", "checked": false, "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58"}]}}'
# sdList <- fromJSON(sdText)
# cat(toJSON(newSdList))
# cat(toJSON(sdList))
# view(newSdList)
# View(sdList) 
#  identical(newSdList,sdList)
```

## Quality Details Column

```{r}
for(i in 1:nrow(dd)) {
#  for(i in 64) {
    newQdList <- list(
      'analyst' = deployDetails$Quality_Analyst[i],
      'analyst_uuid' = '',
      'quality_details' = list(
        list(
          'quality' = 'Good', #Setting default to 'good' rather than deployDetails$Quality_Category[i] because the quality low and high frequency in our spreadsheet is referring to the frequency range where the data is good
          'low_freq' = deployDetails$Quality_LowFreq[i],
          'high_freq' = deployDetails$Quality_HighFreq[i],
          'start' = posixToText(deployDetails$Data_Start[i]),
          'end' = posixToText(deployDetails$Data_End[i]),
          'comments' = paste('Refer to ', deployDetails$Data_ID[i], '_500Hz_LF_Noise_Log.xls' , ' for detailed noise logs.', sep = ""),
          'channels' = list(
           1)
        )
      ),
      'method' = '',
      'objectives' = '',
      'abstract' = ''
    )
    
# save newQdList to r list
dd$QUALITY_DETAILS[i] <- toJSON(newQdList)
}


# Comment once working
# qdText <- '{"analyst": "Kourtney Burger", "analyst_uuid": "", "quality_details": [{"quality": "Good", "low_freq": "0", "high_freq": "192000", "start": "2023-10-05T23:29:58", "end": "2023-10-06T23:23:58", "comments": "Refer to ADRIFT_097_500Hz_LF_Noise_Log.xls for detailed noise logs.", "channels": [1]}], "method": "", "objectives": "", "abstract": ""}'
# qdList <- fromJSON(qdText)
# cat(toJSON(newQdList))
# cat(toJSON(qdList))
# view(newQdList)
# View(qdList)
# identical(newQdList,qdList)
```

## Scientists Column

```{r}
# PASCAL - Shannon Rankin & Jennifer McCullough
# CCES - Shannon Rankin and Anne Simonis
# ADRIFT - Shannon Rankin & Chief sci from deployment details

for (i in 1:nrow(dd)) {
# for(i in 64) {
  newSciList <- list(
    list(
      'name' = 'Shannon Rankin',
      'uuid' = ''
    ),
    list(
      'name' = deployDetails$ChiefSci[i],
      'uuid' = ''
    )
  )

  dd$SCIENTISTS[i] <- toJSON(newSciList)
}


# Comment once working
# Copy text from database 
# sciText <- '[{"name": "Shannon Rankin", "uuid": ""}, {"name": "Eric Bjorkstedt", "uuid": ""}]'
# sciList <- fromJSON(sciText)
# cat(toJSON(newSciList))
# cat(toJSON(sciList))
# view(newSciList)
# View(sciList)
# identical(newSciList,sciList)
```

## Sponsers Column

```{r}
# This will always be NOAA SWFSC

for (i in 1:nrow(dd)) {
#  for (i in 64) {
    newSponList <- list(
    list(
      'name' = 'NOAA SWFSC',
      'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
    )
  )

  dd$SPONSORS[i] <- toJSON(newSponList)
}

# Comment once working
# Copy text from database 
# sponText <- '[{"name": "NOAA SWFSC", "uuid": "918a8687-8b33-4f70-b550-79a5273866fa"}]'
# sponList <- fromJSON(sponText)
# cat(toJSON(newSponList))
# cat(toJSON(sponList))
# view(newSponList)
# View(sponList)
# identical(newSponList,sponList)
```

## Funders Column

```{r}
# For ADRIFT, this will always be NOAA SWFSC, BOEM, & ...

for (i in 1:nrow(dd)) {
#  for (i in 64) {
    
  newFunList <- list(
    list(
      'name' = 'NOAA SWFSC',
      'uuid' = '918a8687-8b33-4f70-b550-79a5273866fa'
    ),
    list(
      'name' = 'BOEM',
      'uuid' = 'fee4d17a-a7dd-4f13-ade5-817b4f1fc86d'
    )
  )

  dd$FUNDERS[i] <- toJSON(newFunList)
}

# Comment once working
# Copy text from database 
# funText <- '[{"name": "NOAA SWFSC", "uuid": "918a8687-8b33-4f70-b550-79a5273866fa"}, {"name": "BOEM", "uuid": "fee4d17a-a7dd-4f13-ade5-817b4f1fc86d"}]'
# funList <- fromJSON(funText)
# cat(toJSON(newFunList))
# cat(toJSON(funList))
# view(newFunList)
# View(funList)
# identical(newFunList,funList)
```

## Sensors Column

```{r}
# A lot of this data has to come from the calibration sheet
# For CCES, all calibration info is in 'CCES2018_CalibrationInfo.csv'
# For PASCAL, make spreadsheet from report
# For ADRIFT, all calibration info was pulled from the inventory and is in 'ADRIFT_CalibrationInfo.csv'

# read in data from calibration info spreadsheet
calInfo <- read.csv("~/GitHub/ADRIFT-Deployment-PassivePacker/Calibration Files/ADRIFT_CalibrationInfo.csv")

for(i in 1:nrow(dd)) {
#  for (i in 64) {
  newSenList <- list(
    '0' = list(
      'type' = 'Audio Sensor',
      'number' = '1',
      'id' = as.character(deployDetails$SensorNumber_1..hydrophone.serial.number.[i]),
      'name' = calInfo$HydrophoneType_1[i],
      'pos_x' = '',
      'pos_y' = '',
      'pos_z' = '-100',
      'value_1' = as.character(deployDetails$SensorNumber_1..hydrophone.serial.number.[i]),
      'value_2' = '',
      'description' = ''
    ),
    '1' = list(
      'type' = 'Audio Sensor',
      'number' = '2',
      'id' = as.character(deployDetails$SensorNumber_2...hydrophone.serial.number.[i]),
      'name' = calInfo$HydrophoneType_2[i],
      'pos_x' = '',
      'pos_y' = '',
      'pos_z' = '-105',
      'value_1' = as.character(deployDetails$SensorNumber_2...hydrophone.serial.number.[i]),
      'value_2' = '',
      'description' = ''
    ),
    '2' = list(
      'type' = 'Depth Sensor',
      'number' = '3',
      'id' = deployDetails$Depth.Sensor..serial.number.[i],
      'name' = 'Sensus Ultra',
      'pos_x' = '',
      'pos_y' = '',
      'pos_z' = '-100',
      'value_1' = '',
      'value_2' = '',
      'description' = ''
    ),
    '3' = list(
      'type' = 'Other Sensor',
      'number' = '4',
      'id' = deployDetails$GPS.ID..if.appropriate...top...bottom.[i],
      'name' = deployDetails$GPS.Tracker[i],
      'pos_x' = '',
      'pos_y' = '',
      'pos_z' = '+1',
      'value_1' = 'GPS',
      'value_2' = '',
      'description' = ''
    )
  )

dd$SENSORS[i] <- toJSON(newSenList)
}

# Comment once working
# Copy text from database
# senText <- '{"0": {"type": "Audio Sensor", "number": "1", "id": "856155", "name": "HTI-92-WB", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "856155", "value_2": "", "description": ""}, "1": {"type": "Audio Sensor", "number": "2", "id": "856166", "name": "HTI-99-HF", "pos_x": "", "pos_y": "", "pos_z": "-105", "value_1": "856166", "value_2": "", "description": ""}, "2": {"type": "Depth Sensor", "number": "3", "id": "16396", "name": "Sensus Ultra", "pos_x": "", "pos_y": "", "pos_z": "-100", "value_1": "", "value_2": "", "description": ""}, "3": {"type": "Other Sensor", "number": "4", "id": "SO-001", "name": "Solar", "pos_x": "", "pos_y": "", "pos_z": "+1", "value_1": "GPS", "value_2": "", "description": ""}}'
# senList <- fromJSON(senText)
# cat(toJSON(newSenList))
# cat(toJSON(senList))
# view(newSenList)
# View(senList)
# identical(newSenList,senList)
```

## Deployment Details Column

```{r}
for(i in 1:nrow(dd)) {
#  for (i in 64) {
    newDdList <- list(
      'DEPLOY_TYPE' = 'Mobile Marine',
      'SEA_AREA' = 'North Pacific Ocean',
      'DEPLOY_SHIP' = deployDetails$Deploy.Vessel[i],
      'FILES' = paste('G:/ADRIFT_RawData/manipulated/gps/',deployDetails$Data_ID[i],"/",deployDetails$Data_ID[i],'_GPS.csv',',','G:/ADRIFT_RawData/manipulated/gps/',deployDetails$Data_ID[i],'/',deployDetails$Data_ID[i],'_DeploymentDepth.csv', sep = ""),
      'POSITION_DETAILS' = ''
    )
    
dd$DEPLOYMENT_DETAILS[i] <- toJSON(newDdList)
}


# Comment once working
# Copy text from database 
# ddText <- '{"DEPLOY_TYPE": "Mobile Marine", "SEA_AREA": "North Pacific Ocean", "DEPLOY_SHIP": "Scrimshaw", "FILES": "G:/ADRIFT_RawData/manipulated/gps/ADRIFT_097/ADRIFT_097_GPS.csv", "POSITION_DETAILS": ""}'
# ddList <- fromJSON(ddText)
# cat(toJSON(newDdList))
# cat(toJSON(ddList))
# view(newDdList)
# View(ddList)
# identical(newDdList,ddList)
```

## Calibration info column

```{r}
for(i in 1:nrow(dd)) {
  newCalList <- list(
    'CAL_STATE' = 'Factory Calibrated',
    'CAL_DOCS_PATH' = paste("G:/ADRIFT_RawData/cal files"), 
    'SENSITIVITY' = '',
    'FREQUENCY' = '',
    'GAIN' = '',
    'COMMENT' = 'This dataset is composed of multichannel recorders with different types of hydrophones, each with its own unique sensitivity and frequency range. For the detailed calibration information refer to the ADRIFT_CalibrationInfo.csv spreadsheet.'
    )
dd$CALIBRATION_INFO[i] <- toJSON(newCalList)
}

# comment once working
# Copy text from database 
# calText <- '{"CAL_STATE": "Factory Calibrated", "CAL_DOCS_PATH": "G:/ADRIFT_RawData/cal files", "SENSITIVITY": "", "FREQUENCY": "", "GAIN": "", "COMMENT": "This dataset is composed of multichannel recorders with different types of hydrophones, each with its own unique sensitivity and frequency range. For the detailed calibration information refer to the ADRIFT_CalibrationInfo.csv spreadsheet."}'
# calList <- fromJSON(calText)
# cat(toJSON(newCalList))
# cat(toJSON(calList))
# view(newCalList)
# View(calList)
# identical(newCalList,calList)
```

## Dataset info column

```{r}
for(i in 1:nrow(dd)) {
#  for (i in 64) {
  newDiList <- list(
    'TYPE' = 'Raw',
    'SUB_TYPE' = 'Audio',
    'PLATFORM' = 'Drifter',
    'INSTRUMENT_TYPE' = deployDetails$Type[i],
    'INSTRUMENT_ID' = deployDetails$Instrument_ID[i],
    'DEPLOYMENT_TIME' = posixToText(deployDetails$Deployment_Date[i]),
    'RECOVERY_TIME' = posixToText(deployDetails$Recovery_Date[i]),
    'AUDIO_START' = posixToText(deployDetails$Data_Start[i]),
    'AUDIO_END' = posixToText(deployDetails$Data_End[i]),
    'SOURCE_PATH' =  paste('G:/ADRIFT_RawData/manipulated/audio/',deployDetails$Data_ID[i], sep = ""), 
    'DATA_COMMENT' = deployDetails$Notes[i]
  )
dd$DATASET_INFO[i] <- toJSON(newDiList)
}

# comment once working
# Copy text from database 
# diText <- '{"TYPE":"Raw","SUB_TYPE":"Audio","PLATFORM":"Drifter","INSTRUMENT_TYPE":"SoundTrap 4300 High Frequency","INSTRUMENT_ID":"5992","DEPLOYMENT_TIME":"2023-10-05T23:16:00","RECOVERY_TIME":"2023-10-06T23:24:00","AUDIO_START":"2023-10-05T23:29:58","AUDIO_END":"2023-10-06T23:23:58","SOURCE_PATH":"G:/ADRIFT_RawData/manipulated/audio/ADRIFT_097","DATA_COMMENT":""}'
# diList <- fromJSON(diText)
# cat(toJSON(newDiList))
# cat(toJSON(diList))
# view(newDiList)
# View(diList) #comment once running full loop
# identical(newDiList,diList)
```

## Ancillary Info Column

```{r}
for(i in 1:nrow(dd)) {
#  for (i in 64) {
    newAncilList <- list(
    'BIO_PATH' = "",
    'OTHER_PATH' = paste('G:/ADRIFT_RawData/manipulated/metadata/', deployDetails$Data_ID[i], sep = ""),
    'TEMP_PATH' = paste('G:/ADRIFT_RawData/manipulated/temp/', deployDetails$Data_ID[i], sep = "")
  )

dd$ANCILLARY_INFO[i] <- toJSON(newAncilList)
}

# comment once working
# ancilText <- '{"BIO_PATH": "", "OTHER_PATH": "G:/ADRIFT_RawData/manipulated/metadata/ADRIFT_097", "TEMP_PATH": "G:/ADRIFT_RawData/manipulated/temp/ADRIFT_097"}'
# ancilList <- fromJSON(ancilText)
# cat(toJSON(newAncilList))
# cat(toJSON(ancilList))
# #view(newAncilList)
# #View(ancilList) #comment once running full loop
# identical(newAncilList,ancilList)
```

# Append to passive packer table

```{r}
con <- dbConnect(SQLite(), here("PassivePacker_v.4.0.3-win64", "database", "packageData.sqlite"))
dbAppendTable(con, 'DEPLOYMENT_DATA', dd)
dbDisconnect(con)
```
