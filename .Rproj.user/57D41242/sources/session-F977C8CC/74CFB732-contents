#Prepare deployment details for NCEI - Passive Packer
#Kourtney Burger

#Save Deployment Details and GPS points as .csv and save to folders within project

#required packages
library(here)
library(DBI)
library(RSQLite)
library(tidyverse)

#Import Deployment Details 
DepDir <- here('ADRIFT-Deployment-PassivePacker')
deployDetails <- read.csv("DeploymentDetails/CCES_DeploymentDetails.csv")

#Import PassivePacker sqlite Data Table
db <- dbConnect(SQLite(), "PassivePacker_v.4.0.2-win64/database/packageData.sqlite")
PP_DeploymentData <- dbReadTable(db, 'DEPLOYMENT_DATA')


#Set up Passive Packer data table
dd <- subset(deployDetails, select = c('Project', 'DeploymentID', 'Cruise', 
                                       'Platform', 'Type', 'Instrument_ID', 
                                       'Deployment_Date', 'Data_Start', 
                                       'Recovery_Date', 'Data_End'))

dd <- dd %>%
  add_column(ID = NA, SITE_OR_CRUISE = NA, PACKAGE_ID = NA, SOURCE_PATH = NA,
             DESTINATION_PATH = NA, METADATA_AUTHOR = 'Kourtney Burger', 
             META_AUTHOR_UUID = NA, PUBLICATION_DATE = NA, DEPLOYMENT_ALIAS = NA,
             SITE_ALIAS = NA, TITLE = NA, PURPOSE = NA, ABSTRACT = NA, 
             DATA_COMMENT = NA, TEMP_PATH = NA, BIO_PATH = NA, OTHER_PATH = NA,
             DOCS_PATH = NA, CALIBRATION_PATH = NA, CREATION_TIME = NA, 
             UPDATE_TIME = NA, USE = NA, SAMPLING_DETAILS = NA, 
             QUALITY_DETAILS = NA, SCIENTISTS = NA, SPONSERS = NA, FUNDERS = NA, 
             SENSORS = NA, DEPLOYMENT_DETAILS = NA, CALIBRATION_INFO = NA, 
             DATASET_INFO = NA, ANCILLARY_INFO = NA)

dd <- dd[, c(11,1,2,3,12,13,14,15,16,17,18,4,5,6,19,20,7,8,9,10,21,22,23,24,25,
             26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42)]

colnames(dd) <- c('ID','PROJECT','DEPLOYMENT_ID','SITE_CRUISE','SITE_OR_CRUISE',
                  'PACKAGE_ID','SOURCE_PATH','DESTINATION_PATH','METADATA_AUTHOR',
                  'META_AUTHOR_UUID','PUBLICATION_DATE','PLATFORM','INSTRUMENT_TYPE',
                  'INSTRUMENT_ID','DEPLOYMENT_ALIAS','SITE_ALIAS','DEPLOY_TIME',
                  'AUDIO_START_TIME','RECOVER_TIME','AUDIO_END_TIME','TITLE',
                  'PURPOSE','ABSTRACT','DATA_COMMENT','TEMP_PATH','BIO_PATH',
                  'OTHER_PATH','DOCS_PATH','CALIBRATION_PATH','CREATION_TIME',
                  'UPDATE_TIME','USE','SAMPLING_DETAILS','QUALITY_DETAILS',
                  'SCIENTISTS','SPONSORS','FUNDERS','SENSORS','DEPLOYMENT_DETAILS',
                  'CALIBRATION_INFO','DATASET_INFO','ANCILLARY_INFO')   

  #Change soundtrap names
dd[dd == "ST640"] <- "SoundTrap 640"
dd[dd == "ST4300HF"] <- "SoundTrap 4300 HF"
dd[dd == "ST300"] <- "SoundTrap 300"
dd[dd == "ST4300"] <- "SoundTrap 4300"
dd[dd == "ST500HF"] <- "SoundTrap 500 HF"
dd[dd == "ST300HF"] <- "SoundTrap 300 HF"

#The following info will stay the same for each project (CCES, PASCAL, ADRIFT)
dd <- 

#Loop

#required packages
library(dplyr)
library(xlsx)
library(openxlsx)
library(stringr)
library(here)
library(lubridate)

makeTethysDep<-function(ProjectID = 'CCES',DepID = '004'){
  
  DepDir<-here('Deployment Worksheets')
  
  #load deployment info
  setwd(DepDir)
  AllDeployments<-xlsx::read.xlsx('Deployment Details.xlsx',sheetName='deployDetails')
  
  #Correct Date/Time formats
  #Dates and times may be read in as characters if NAs are present
  if(is.character(AllDeployments$Deployment_Date)){
    AllDeployments$Recovery_Date<-openxlsx::convertToDateTime(AllDeployments$Deployment_Date)}
  if(is.character(AllDeployments$Recovery_Date)){
    AllDeployments$Recovery_Date<-openxlsx::convertToDateTime(AllDeployments$Recovery_Date)}
  if(is.character(AllDeployments$Data_Start)){
    AllDeployments$Data_Start<-openxlsx::convertToDateTime(AllDeployments$Data_Start)}
  if(is.character(AllDeployments$Data_End)){
    AllDeployments$Data_End<-openxlsx::convertToDateTime(AllDeployments$Data_End)}
  #All dates and datetimes must be saved as POSIXct for Tethys to understand them
  AllDeployments$Deployment_Date<-as.POSIXct(AllDeployments$Deployment_Date,'%m/%d/%Y',tz='UTC')
  AllDeployments$Recovery_Date<-as.POSIXct(AllDeployments$Recovery_Date,'%m/%d/%Y',tz='UTC')
  AllDeployments$Data_Start<-as.POSIXct(AllDeployments$Data_Start,"%m/%d/%Y %H:%M",tz='UTC')
  AllDeployments$Data_End<-as.POSIXct(AllDeployments$Data_End,"%m/%d/%Y %H:%M",tz='UTC')
  
  AllDeployments<-AllDeployments %>%
    mutate(Depth_Sensor=as.numeric(Depth_Sensor),
           Recovery_Latitude=as.numeric(Recovery_Latitude),
           Recovery_Longitude=as.numeric(Recovery_Longitude),
           SensorNumber_1=as.numeric(SensorNumber_1),
           SensorNumber_2=as.numeric(SensorNumber_2),
           SensorNumber_3=as.numeric(SensorNumber_3))
  
  #create dataframe for individual deployment 
  Deployment<-AllDeployments %>% 
    filter(Project==ProjectID,DeploymentID==as.numeric(DepID)) 
  
  #create separate dataframe for sensors
  Sensors<-Deployment %>%
    summarize(Data_ID=Data_ID,
              ChannelNumber=c(ChannelNumber_1,ChannelNumber_2,ChannelNumber_3),
              SensorNumber=c(SensorNumber_1,SensorNumber_2,SensorNumber_3)) %>%
    mutate(ChannelNumber=as.numeric(ChannelNumber)) %>%
    na.omit()
  
  #remove sensor info from deployment dataframe
  Deployment<-Deployment %>%
    select(-c(ChannelNumber_1,ChannelNumber_2,ChannelNumber_3,
              SensorNumber_1,SensorNumber_2,SensorNumber_3))
  
  #load GPS data
  GPSDir<-here('Deployment Worksheets','GPS')
  GPSfiles<-dir(path=GPSDir,pattern='GPS')
  GPSInd<-which(str_match(GPSfiles,paste0(ProjectID,'_',DepID))>0)
  GPSdata<-read.csv(file.path(GPSDir,GPSfiles[GPSInd]))
  GPSdata$UTC<-as.POSIXct(GPSdata$UTC,format='%Y-%m-%d %H:%M:%S',tz='UTC')
  
  #Create worksheet
  DepFile<-paste0(ProjectID,'_',DepID,'_DeployDetails.xlsx')
  DepFilePath = file.path(DepDir,DepFile)
  
  wb = createWorkbook()
  shtDeployDetails = addWorksheet(wb, "deployDetails")
  shtGPS = addWorksheet(wb, "GPS")
  shtSensor = addWorksheet(wb, "Sensor")
  writeData(wb,shtDeployDetails,Deployment)
  writeData(wb,shtGPS,GPSdata) 
  writeData(wb,shtSensor,Sensors) 
  saveWorkbook(wb,DepFilePath,overwrite=TRUE)
}
