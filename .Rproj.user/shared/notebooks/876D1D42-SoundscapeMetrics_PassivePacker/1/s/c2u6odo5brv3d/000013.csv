"0","for(i in 1:nrow(dd)) {"
"0","#  for (i in 81) {"
"0","  newDiList <- list("
"0","    'TYPE' = 'Product',"
"0","    'SUB_TYPE' = 'Sound Level Metrics',"
"0","    'PLATFORM' = 'Drifter',"
"0","    'INSTRUMENT_TYPE' = deployDetails$Type[i],"
"0","    'INSTRUMENT_ID' = '',"
"0","    'DEPLOYMENT_TIME' = '',"
"0","    'RECOVERY_TIME' = '',"
"0","    'AUDIO_START' = posixToText(as.POSIXct(SumMetadata$dataStart[i], tz='UTC')),"
"0","    'AUDIO_END' = posixToText(as.POSIXct(SumMetadata$dataEnd[i], tz='UTC')),"
"0","    'SOURCE_PATH' =  paste('G:/Soundscape Metrics/Data/RAW from DON/metrics/',deployDetails$Data_ID[i], sep = """"),"
"0","    'DATA_FILES' = paste('G:/Soundscape Metrics/Data/RAW from DON/metrics/',deployDetails$Data_ID[i], sep = """"),"
"0","    'ANALYSIS_TIME_ZONE' = '0',"
"0","    'ANALYSIS_EFFORT' = '3600',"
"0","    'MIN_ANALYSIS_FREQUENCY' = as.character(SumMetadata$LowBand[i]),"
"0","    'MAX_ANALYSIS_FREQUENCY' = as.character(SumMetadata$HighBand[i]),"
"0","    'ANALYSIS_SAMPLE_RATE' = '19200',"
"0","    'SOFTWARE_NAME' = 'Triton-MATLAB',"
"0","    'SOFTWARE_VERSION' = 'triton1.93.20160524',"
"0","    'PROTOCOL_REFERENCE' = '',"
"0","    'PROCESSING_STATEMENT' = 'The process to obtain these sound level metrics closely follows SanctSound protocols (https://sanctsound.ioos.us/). Triton software was used to decimate data to 48kHz and create long-term spectral averages (LTSAs) with a 1 Hz, 1 second resolution. These LTSAs were used to calculate sound levels in 2 minute windows from 100-24000 Hz. Median (50th percentile), mean, and various statistical sound levels (1st, 5th, 10th,25th, 75th, 90th, 95th percentiles) are calculated for each metric. For detailed methods, see our Soundscape analysis methods here https://sael-swfsc.github.io/adrift-analysis-methods/content/Soundscapes/Metrics.html.',"
"0","    'SOFTWARE_STATEMENT' = 'The Soundscape Metric Remora within the Triton Software Package was used to calculate sound level metrics (https://github.com/MarineBioAcousticsRC/Triton/tree/master/Remoras/Soundscape-Metrics).',"
"0","    'ANALYSIS_START' = posixToText(as.POSIXct(SumMetadata$dataStart[i], tz='UTC')),"
"0","    'ANALYSIS_END' = posixToText(as.POSIXct(SumMetadata$dataEnd[i], tz='UTC'))"
"0","    )"
"0","  "
"0","dd$DATASET_INFO[i] <- toJSON(newDiList)"
"0","}"
"0",""
"0","# # comment once working"
"0","# # Copy text from database "
"0","# diText <- '{""TYPE"": ""Product"", ""SUB_TYPE"": ""Sound Level Metrics"", ""PLATFORM"": ""Drifter"", ""INSTRUMENT_TYPE"": ""SoundTrap 640"", ""INSTRUMENT_ID"": """", ""DEPLOYMENT_TIME"": """", ""RECOVERY_TIME"": """", ""AUDIO_START"": ""2023-11-06T13:42:00"", ""AUDIO_END"": ""2023-11-10T13:22:00"", ""SOURCE_PATH"": ""G:/Soundscape Metrics/Data/RAW from DON/metrics/ADRIFT_108"", ""DATA_FILES"": ""G:/Soundscape Metrics/Data/RAW from DON/metrics/ADRIFT_108"", ""ANALYSIS_TIME_ZONE"": ""0"", ""ANALYSIS_EFFORT"": ""3600"", ""MIN_ANALYSIS_FREQUENCY"": ""100"", ""MAX_ANALYSIS_FREQUENCY"": ""24000"", ""ANALYSIS_SAMPLE_RATE"": ""19200"", ""SOFTWARE_NAME"": ""Triton-MATLAB"", ""SOFTWARE_VERSION"": ""triton1.93.20160524"", ""PROTOCOL_REFERENCE"": """", ""PROCESSING_STATEMENT"": ""The process to obtain these sound level metrics closely follows SanctSound protocols (https://sanctsound.ioos.us/). Triton software was used to decimate data to 48kHz and create long-term spectral averages (LTSAs) with a 1 Hz, 1 second resolution. These LTSAs were used to calculate sound levels in 2 minute windows from 100-24000 Hz. Median (50th percentile), mean, and various statistical sound levels (1st, 5th, 10th,25th, 75th, 90th, 95th percentiles) are calculated for each metric. For detailed methods, see our Soundscape analysis methods here https://sael-swfsc.github.io/adrift-analysis-methods/content/Soundscapes/Metrics.html."", ""SOFTWARE_STATEMENT"": ""The Soundscape Metric Remora within the Triton Software Package was used to calculate sound level metrics (https://github.com/MarineBioAcousticsRC/Triton/tree/master/Remoras/Soundscape-Metrics)."", ""ANALYSIS_START"": ""2023-11-06T13:42:00"", ""ANALYSIS_END"": ""2023-11-10T13:22:00""}'"
"0","# diList <- fromJSON(diText)"
"0","# cat(toJSON(newDiList))"
"0","# cat(toJSON(diList))"
"0","# #view(newDiList)"
"0","# #View(diList) #comment once running full loop"
"0","# identical(newDiList,diList)"
